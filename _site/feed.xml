<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DCSnail</title>
    <description>iOS, watchOS, swifter</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 20 May 2019 16:07:43 +0800</pubDate>
    <lastBuildDate>Mon, 20 May 2019 16:07:43 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Template Wellcome</title>
        <description>&lt;p&gt;这是我的个人博客, 欢迎阅读交流.
, 
我的博客地址是&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io&quot;&gt;网址1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[网址2][CSDN]&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/jekyll-uno/images/snail.jpg&quot;&gt;图片1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/jekyll-uno/images/snail.jpg&quot; alt=&quot;图片2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为什么要&lt;code class=&quot;highlighter-rouge&quot;&gt;搭建这个博客&lt;/code&gt;呢?&lt;/p&gt;

&lt;p&gt;来看看, 代码如下&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8088&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wangyanchang21&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://wangyanchang21.github.io&quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考资料:
[CSDN]:https://dcsnail.blog.csdn.net&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83584996&quot;&gt;以太坊钱包 Trust项目解读之架构和流程&lt;/a&gt;
&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;由于前阵子工作涉及到区块链方面的业务, 再加上自己对技术的热忱, 本人也是不断地学(恶)习(补)这方面的知识。在 github上的有很多优秀的开源钱包的代码, 比如说今天要分享的iOS版本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;, 还有这个月24号刚刚官宣开源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;imToken&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;文章中, 会涉及到一些区块链的基础知识如以太坊、智能合约、节点、Token、地址等等, 这些基础知识就不介绍了, 还请自行查阅吧。&lt;/p&gt;

&lt;h1 id=&quot;以太坊钱包平台介绍&quot;&gt;以太坊钱包平台介绍&lt;/h1&gt;

&lt;p&gt;首先, 还是先介绍下市场上常用的一些以太坊钱包吧, 至少让大家了解一下这些平台。&lt;/p&gt;

&lt;h2 id=&quot;mist&quot;&gt;Mist&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mist&lt;/code&gt;是一个全节点的钱包, 以太坊的官方钱包。
官方地址: &lt;a href=&quot;https://ethereum.org/&quot;&gt;ethereum&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;parity&quot;&gt;Parity&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Parity&lt;/code&gt;也是一个全节点钱包, 原以太坊基金会部分成员开发的。
官方地址: &lt;a href=&quot;https://www.parity.io/&quot;&gt;Parity&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;trust&quot;&gt;Trust&lt;/h2&gt;

&lt;p&gt;在国外 App Store已经上架, 目前有 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;移动端的应用, 应用中有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web3浏览器&lt;/code&gt;并支持很多 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;使用。
官方地址: &lt;a href=&quot;https://trustwalletapp.com/&quot;&gt;TrustWalletApp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;imtoken&quot;&gt;imToken&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;imToken&lt;/code&gt;是一个中国团队开发的, 目前只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;移动端的应用。
官方地址: &lt;a href=&quot;https://token.im/&quot;&gt;ImToken&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;myetherwallet&quot;&gt;MyEtherWallet&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyEtherWallet&lt;/code&gt; 作为一个轻钱包，无需下载，直接在 Web端进行操作。
官方地址: &lt;a href=&quot;https://www.myetherwallet.com/&quot;&gt;MyEtherWallet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;metamask&quot;&gt;MetaMask&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MetaMask&lt;/code&gt;是一个轻量级钱包, 以Chrome扩展程序存在的 Web端钱包。
官方地址: &lt;a href=&quot;https://metamask.io/&quot;&gt;MetaMask&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;trust-wallet&quot;&gt;Trust Wallet&lt;/h1&gt;

&lt;p&gt;了解过各种钱包平台后, 进入今天主要对应用 &lt;a href=&quot;https://github.com/TrustWallet/trust-wallet-ios&quot;&gt;trust-wallet-ios&lt;/a&gt;进行源码解析, 它在 github上已经是开源的了。并且在众多开源的虚拟货币钱包项目中，&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;已经十分完善和稳定了，已经在国外的 App Store上架了，对应的 Android版本也已开源(但貌似 Android版本并不是最新版本的)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;可与任何&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC20&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC223&lt;/code&gt;代币配合使用，并支持以太坊生态系统中的以太坊主链、侧链，以及所有服从以太坊协议的加密货币。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;为用户提供统一的钱包地址，可用于管理以太坊和所有代币。还有一个功能齐全的&lt;code class=&quot;highlighter-rouge&quot;&gt;Web3&lt;/code&gt;浏览器，可与任何分布式的应用程式(&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;)配合使用。在它的官网有这样的介绍:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;无服务器环境完全本地化了每个已安装的应用程序&lt;/li&gt;
    &lt;li&gt;以客户端为基础架构,可确保密钥本地存储在您的设备上&lt;/li&gt;
    &lt;li&gt;银行级安全保护您的数字资产免受潜在威胁。&lt;/li&gt;
    &lt;li&gt;应用级认证系统可以防止未经授权的设备进行访问&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;主要模块&quot;&gt;主要模块&lt;/h2&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181031154630925.png&quot; width=40% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;第一个模块是一个浏览器, 具体来说是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web3浏览器&lt;/code&gt;, 它支持许多 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;(Decentralized Application的缩写, 即分布式应用), 支持基于以太坊的货币交易和游戏的 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApps&lt;/code&gt;。当然也具备普通浏览器的功能, 访问其它网址, 添加书签, 查看历史记录等等。&lt;/p&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181031154744766.png&quot; width=40% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;第二个模块是钱包模块, 是这个 App最核心的部分, 对&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;的交易记录、余额、汇率变化的查看, 也可以进行交易转账(发送和接收)。&lt;/p&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181031154823974.png&quot; width=40% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;第三个模块是设置模块, 包括钱包账户的切换, 安全管理, 当前货币种类, 浏览器设置, 社区分享, 开发者选项等等。&lt;/p&gt;

&lt;h2 id=&quot;项目架构&quot;&gt;项目架构&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的 iOS项目在架构设计和代码风格、包括技术栈都是很不错的。我将会以架构模式和四层式架构来解析此项目。&lt;/p&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181031171755801.png&quot; width=30% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;目录结构。&lt;/strong&gt; 如上图所示, 主要模块和重要功能组成第一层的节点目录, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Tokens&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Style&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Extension&lt;/code&gt;等等。又在各个模块中将第二层目录按照功能分为&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinators&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Views&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModels&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewControllers&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Layouts&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;架构模式。&lt;/strong&gt; 采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;的架构模式, 不过并没有使用动态绑定, 但这并不影响它项目结构清晰的逻辑。相对于&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;的架构模式来说, 就使得&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;的负载变小了, 易于测试性提高了。当然它也具备&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;架构的优缺点, 这里就不赘述了。 我大概画了一个草图, 如下图:&lt;/p&gt;
&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181102175322816.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;视图层。&lt;/strong&gt; 整个项目绝大部分使用纯代码进行&lt;code class=&quot;highlighter-rouge&quot;&gt;View层&lt;/code&gt;的编写, 且代码规范性较强, 也没有过多的继承, 所以代码可读性高。布局方式采用&lt;code class=&quot;highlighter-rouge&quot;&gt;autolayout&lt;/code&gt;方式, 在具体模块中还以&lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt;为功能模块进行开发, 使&lt;code class=&quot;highlighter-rouge&quot;&gt;View层&lt;/code&gt;的代码更加清晰。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;业务层。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的主要业务逻辑当然是有&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;来承担的, 另外还配合了&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;(或者说路由)的使用, 在页面之间的跳转逻辑上实现了统一管理。这样就减少了横向依赖, 也让跨层访问的业务更加容易开展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络层。&lt;/strong&gt; 项目中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;进行数据请求, &lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;已经做了足够多的工作了, 包括交付给给业务层封装成对象的数据、网络层的各种优化工作等。也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONRPCKit&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;APIKit&lt;/code&gt;的框架去进行数据请求, 这在&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016#t9&quot;&gt;接下来的文章&lt;/a&gt;中会具体分析, 这些请求就是关于智能合约调用的。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;客户端在区块链中相当于一个轻量节点, 从公链上请求数据的话, 需要依靠某个全节点。就如图中的URL, 就可以理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;客户端取链上数据所借助的全节点。&lt;/p&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181031183501958.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;数据层。&lt;/strong&gt; 主要的数据持有化方式使用Realm数据库, 这是个轻量级、高性能、高效率、可跨平台的移动数据库。核心数据如钱包账户、交易、&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;等都存储于此。另外, 也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;来保存比较重要且轻量的数据, 如私钥、应用锁设置和密码、最近使用的钱包、&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;cookies&lt;/code&gt;。还有一些数据, 如当前货币种类、启动次数、当前版本启动次数、是否分享、是否评分等等, 都是采用&lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;的形式进行数据保存的。&lt;/p&gt;

&lt;h2 id=&quot;项目流程&quot;&gt;项目流程&lt;/h2&gt;

&lt;p&gt;从程序启动&lt;code class=&quot;highlighter-rouge&quot;&gt;APPDelegate&lt;/code&gt;开始, &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;作为app间的路由, 判断当前app内是否有钱包账户, 若没有则进入以&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeViewController&lt;/code&gt;为根控制器的页面进行钱包账户创建; 若有最近使用过的钱包账户, 则进入app内部的路由&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;。在这里, 钱包账号创建的页面和钱包使用页面已经划分为两条业务线。其实从业务角度来说, 可以也可以理解为这是&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;内部的两个应用。&lt;/p&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181102171823364.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;进入&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;后, 才真正开始创建&lt;code class=&quot;highlighter-rouge&quot;&gt;TabBarController&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationController&lt;/code&gt;以及各个业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;。上图中明确表示了这个过程, 也对主要的业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和其对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;进行了说明, 且同颜色的之间是一一对应的。&lt;/p&gt;

&lt;h2 id=&quot;主体框架的功能划分&quot;&gt;主体框架的功能划分&lt;/h2&gt;

&lt;p&gt;本文前面介绍过项目的目录结构了, 但这里所说的框架并不是按照目录结构的角度, 而是延续上面的项目流程的角度。首先, 我将按源码进行原模原样的表述, 然后我将提出对于其功能划分的一些自己的建议。因为我认为某写业务模块的功能是应该出现在另一个业务模块中的。&lt;/p&gt;

&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181102171757143.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;h3 id=&quot;appdelegate&quot;&gt;AppDelegate&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;需要承担的是程序的初始化以及整个应用生命周期的所影响的业务逻辑。
&lt;strong&gt;ProtectionCoordinator。&lt;/strong&gt; 功能是在保护应用的方面, 如应用锁、解锁以及当应用失去焦点后保护应用内部页面不被暴露的功能。
&lt;strong&gt;URLNavigatorCoordinator。&lt;/strong&gt; 功能是由 &lt;a href=&quot;https://github.com/devxoul/URLNavigator&quot;&gt;URLNavigator&lt;/a&gt;和 &lt;a href=&quot;https://github.com/BranchMetrics/ios-branch-deep-linking&quot;&gt;Branch&lt;/a&gt;的功能组成的。前者是对&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;进行监听的, 并在检测到约定好的URL了进行映射和处理。后者是关于延迟深度链接(Deferred Deep Linking)的。
&lt;strong&gt;Branch。&lt;/strong&gt; 和上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;是同一个, 在启动应用时进行初始化, 并将在应用程序生命周期中多次调用，当应用由后台向前台切换时也将调用。用于处理从外部跳转入后, 根据传入的参数要跳转进入指定的页面。
&lt;strong&gt;EtherKeystore。&lt;/strong&gt; 应用的核心业务的处理类, 有钱包管理(创建、删除、导入、导出)、助记词转化、签名工作、私钥管理等功能。它的具体业务将会在&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016&quot;&gt;下篇文章&lt;/a&gt;中具体介绍。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProtectionCoordinator&lt;/code&gt;需要跟随应用的生命周期进行功能的调整。&lt;code class=&quot;highlighter-rouge&quot;&gt;URLNavigatorCoordinator&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;navigator&lt;/code&gt;用来处理响应&lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html&quot;&gt;URL Scheme&lt;/a&gt;这种由其它 App的跳入, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;用来处理响应&lt;a href=&quot;https://developer.apple.com/ios/universal-links/&quot;&gt;Universal Links&lt;/a&gt;这种通用链接的跳入形式。
而&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;在这里只是作为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;初始化的一个参数, 并无实际使用。这也是我个人认为在这个业务模块并不应出现的类, 当然后面我也会细聊我为什么这么说? 我也将会给出我自己的建议。&lt;/p&gt;

&lt;h3 id=&quot;appcoordinator&quot;&gt;AppCoordinator&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;(或者说路由)在业务上一般可以分为 App间的路由和 App内的路由。而在此项目中, 因为还有&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;, 所以当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;是一个 App间的路由, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;是一个App内的路由。所以在项目中&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;承担了一些应用层的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initializers。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CrashReportInitializer&lt;/code&gt;是统计崩溃的, 用到&lt;a href=&quot;https://get.fabric.io/&quot;&gt;Fabric&lt;/a&gt;的一些工具, 如 Crashlytics、Answers等。而&lt;code class=&quot;highlighter-rouge&quot;&gt;SkipBackupFilesInitializer&lt;/code&gt;是防止文件被备份的。
&lt;strong&gt;AppTracker。&lt;/strong&gt; 记录应用启动次数、当前版本启动次数、是否分享、是否评分等一些仅保存于本地的应用层统计数据。
&lt;strong&gt;AppGlobalStyle。&lt;/strong&gt; 应用统一的风格, 包括导航栏外观、UITexfield外观、TableView分割线风格(边距, 颜色)等。这个统一风格是整个应用一致的, 一定要区别于统一管理的字体和颜色的类(如项目中的Colors类和AppStyle类)。
&lt;strong&gt;PushNotificationsRegistrar。&lt;/strong&gt; 管理远程推送授权和注册相关的业务。
&lt;strong&gt;BranchEventClosure。&lt;/strong&gt; 在从外部跳入当前 App后, 由&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;的操作调起的, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;BranchEventClosure&lt;/code&gt;的 block中, 由下层的&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来控制将要跳入的目标页面。但我个人认为, 它并不应该出现在这里, 后面建议中会具体说明原因。&lt;/p&gt;

&lt;h3 id=&quot;incoodinator&quot;&gt;InCoodinator&lt;/h3&gt;

&lt;p&gt;这是 App内的路由, 与具体业务模块有间接联系的路由, 负责创建和管理各个业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和各个业务模块之间的跳转逻辑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CheckDeviceCoordinator。&lt;/strong&gt; 检测当前设备是否是越狱设备, 如果是越狱设备则会提醒用户不安全, 因为这样在 &lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;中存储的钱包账户的私钥就可能被盗。毕竟在区块链中, 私钥是你作为钱包主人的唯一证明。
&lt;strong&gt;HelpsCoordinator。&lt;/strong&gt; 通过本地对启动次数的监听, 在指定的启动次数时对用户进行应用分享和评分的提醒。
&lt;strong&gt;URLNavigable、URLNavigator。&lt;/strong&gt; 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;中进行监听, 一旦检测到有约定好的URL后, 可以在对应的block中做出想要的映射或者处理。如下图。&lt;/p&gt;
&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/2018110216360916.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;MigrationInitializer、Realm、WalletSession。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库和数据库迁移的处理。这里其实不是特指数据库, 而是指所有与具体业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;创建时所使用的公共类。所以这里包括&lt;code class=&quot;highlighter-rouge&quot;&gt;WalletSession&lt;/code&gt;等类。
&lt;strong&gt;Coordinators。&lt;/strong&gt; 指&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;所管理的具体业务模块的 Coordinator, 包括&lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TokensCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;settingsCoordinator&lt;/code&gt;。
&lt;strong&gt;TabBarController。&lt;/strong&gt; 创建上述&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinators&lt;/code&gt;中各个具体业务模块的 Coordinator所管理的&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationController&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;直抒己见&quot;&gt;直抒己见&lt;/h3&gt;

&lt;p&gt;在上面的文章中, 我也说过有一些地方, 我个人认为是可以做一些调整的。当然, 如果你没有我这样的强迫症, 可以略过。
先来看一个理念。在没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;的项目中, 其启动流程和各个&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;之间的创建应该是这样的(&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.4g9db2ybm&quot;&gt;原图出处&lt;/a&gt;):&lt;/p&gt;
&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181101181606999.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;然而在使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;的项目中, 应该是这样的(&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.4g9db2ybm&quot;&gt;原图出处&lt;/a&gt;):&lt;/p&gt;
&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181101182031878.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;当然, 在这个项目中, 项目的架构模式并不完全是第二张图这样。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;将第二张图中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;细分为了两个, 即应用间和应用内的路由。而在&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;项目中, 图二中的显然只是相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;, 而从外部跳转(包括从其它 App跳转也包括从通用链接跳转)进入当前 App的管理是&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;来处理的。这个理念懂了, 我们进入主题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一, 将 App外部跳转的事务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;。&lt;/strong&gt; 如果按照上面所说的理念, 那么在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中, 其实应该把所有与外部跳转的事务交由&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;来做。也就是可以考虑将&lt;code class=&quot;highlighter-rouge&quot;&gt;URLNavigatorCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;这些放到&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中只留下与应用的初始化以及整个应用生命周期的所影响的业务逻辑。
&lt;strong&gt;第二, 将于具体的业务模块切换的事务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;。&lt;/strong&gt;  在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;BranchEventClosure&lt;/code&gt;, 是用来通过&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来控制目标页面的跳转的。这些与具体业务模块的跳转逻辑有关的业务就应该交于内部路由&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来做。&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中只留下与外部跳转和应用层有关的业务。
如果这样多了的话, 功能划分就有变化了, 如下图, 绿色边框的是新增的功能:&lt;/p&gt;
&lt;center&gt;&amp;lt;img src=&quot;https://img-blog.csdnimg.cn/20181102171638114.png&quot; width=70% img/&amp;gt;&lt;/center&gt;

&lt;p&gt;到此为止 Trust Wallet项目以 iOS的角度, 按照架构和主要功能对其源码解析完了。然后, 真正关于区块链的核心功能, 如智能合约调用、私钥公钥管理等, 会以&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;钱包为例让你逐步理解。具体请阅读下一篇&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;。&lt;/p&gt;

</description>
        <pubDate>Tue, 14 May 2019 02:23:23 +0800</pubDate>
        <link>http://localhost:4000/2019/Template-Wellcome/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/Template-Wellcome/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>以太坊钱包 Trust项目解读之架构和流程</title>
        <description>&lt;p&gt;以太坊钱包 Trust项目解读之架构和流程&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83584996&quot;&gt;以太坊钱包 Trust项目解读之架构和流程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;由于前阵子工作涉及到区块链方面的业务, 再加上自己对技术的热忱, 本人也是不断地学(恶)习(补)这方面的知识。在 github上的有很多优秀的开源钱包的代码, 比如说今天要分享的iOS版本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;, 还有这个月24号刚刚官宣开源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;imToken&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;文章中, 会涉及到一些区块链的基础知识如以太坊、智能合约、节点、Token、地址等等, 这些基础知识就不介绍了, 还请自行查阅吧。&lt;/p&gt;

&lt;h1 id=&quot;以太坊钱包平台介绍&quot;&gt;以太坊钱包平台介绍&lt;/h1&gt;

&lt;p&gt;首先, 还是先介绍下市场上常用的一些以太坊钱包吧, 至少让大家了解一下这些平台。&lt;/p&gt;

&lt;h2 id=&quot;mist&quot;&gt;Mist&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mist&lt;/code&gt;是一个全节点的钱包, 以太坊的官方钱包。&lt;/p&gt;

&lt;p&gt;官方地址: &lt;a href=&quot;https://ethereum.org/&quot;&gt;ethereum&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;parity&quot;&gt;Parity&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Parity&lt;/code&gt;也是一个全节点钱包, 原以太坊基金会部分成员开发的。&lt;/p&gt;

&lt;p&gt;官方地址: &lt;a href=&quot;https://www.parity.io/&quot;&gt;Parity&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;trust&quot;&gt;Trust&lt;/h2&gt;

&lt;p&gt;在国外 App Store已经上架, 目前有 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;移动端的应用, 应用中有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web3浏览器&lt;/code&gt;并支持很多 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;使用。&lt;/p&gt;

&lt;p&gt;官方地址: &lt;a href=&quot;https://trustwalletapp.com/&quot;&gt;TrustWalletApp&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;imtoken&quot;&gt;imToken&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;imToken&lt;/code&gt;是一个中国团队开发的, 目前只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;移动端的应用。&lt;/p&gt;

&lt;p&gt;官方地址: &lt;a href=&quot;https://token.im/&quot;&gt;ImToken&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;myetherwallet&quot;&gt;MyEtherWallet&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyEtherWallet&lt;/code&gt; 作为一个轻钱包，无需下载，直接在 Web端进行操作。&lt;/p&gt;

&lt;p&gt;官方地址: &lt;a href=&quot;https://www.myetherwallet.com/&quot;&gt;MyEtherWallet&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;metamask&quot;&gt;MetaMask&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MetaMask&lt;/code&gt;是一个轻量级钱包, 以Chrome扩展程序存在的 Web端钱包。&lt;/p&gt;

&lt;p&gt;官方地址: &lt;a href=&quot;https://metamask.io/&quot;&gt;MetaMask&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;trust-wallet&quot;&gt;Trust Wallet&lt;/h1&gt;

&lt;p&gt;了解过各种钱包平台后, 进入今天主要对应用 &lt;a href=&quot;https://github.com/TrustWallet/trust-wallet-ios&quot;&gt;trust-wallet-ios&lt;/a&gt;进行源码解析, 它在 github上已经是开源的了。并且在众多开源的虚拟货币钱包项目中，&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;已经十分完善和稳定了，已经在国外的 App Store上架了，对应的 Android版本也已开源(但貌似 Android版本并不是最新版本的)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;可与任何&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC20&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC223&lt;/code&gt;代币配合使用，并支持以太坊生态系统中的以太坊主链、侧链，以及所有服从以太坊协议的加密货币。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;为用户提供统一的钱包地址，可用于管理以太坊和所有代币。还有一个功能齐全的&lt;code class=&quot;highlighter-rouge&quot;&gt;Web3&lt;/code&gt;浏览器，可与任何分布式的应用程式(&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;)配合使用。在它的官网有这样的介绍:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;无服务器环境完全本地化了每个已安装的应用程序&lt;/li&gt;
    &lt;li&gt;以客户端为基础架构,可确保密钥本地存储在您的设备上&lt;/li&gt;
    &lt;li&gt;银行级安全保护您的数字资产免受潜在威胁。&lt;/li&gt;
    &lt;li&gt;应用级认证系统可以防止未经授权的设备进行访问&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;主要模块&quot;&gt;主要模块&lt;/h2&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031154630925.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第一个模块是一个浏览器, 具体来说是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web3浏览器&lt;/code&gt;, 它支持许多 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;(Decentralized Application的缩写, 即分布式应用), 支持基于以太坊的货币交易和游戏的 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApps&lt;/code&gt;。当然也具备普通浏览器的功能, 访问其它网址, 添加书签, 查看历史记录等等。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031154744766.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第二个模块是钱包模块, 是这个 App最核心的部分, 对&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;的交易记录、余额、汇率变化的查看, 也可以进行交易转账(发送和接收)。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031154823974.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第三个模块是设置模块, 包括钱包账户的切换, 安全管理, 当前货币种类, 浏览器设置, 社区分享, 开发者选项等等。&lt;/p&gt;

&lt;h2 id=&quot;项目架构&quot;&gt;项目架构&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的 iOS项目在架构设计和代码风格、包括技术栈都是很不错的。我将会以架构模式和四层式架构来解析此项目。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031171755801.png&quot; width=&quot;30%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;目录结构。&lt;/strong&gt; 如上图所示, 主要模块和重要功能组成第一层的节点目录, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Tokens&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Style&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Extension&lt;/code&gt;等等。又在各个模块中将第二层目录按照功能分为&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinators&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Views&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModels&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewControllers&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Layouts&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;架构模式。&lt;/strong&gt; 采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;的架构模式, 不过并没有使用动态绑定, 但这并不影响它项目结构清晰的逻辑。相对于&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;的架构模式来说, 就使得&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;的负载变小了, 易于测试性提高了。当然它也具备&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;架构的优缺点, 这里就不赘述了。 我大概画了一个草图, 如下图:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102175322816.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;视图层。&lt;/strong&gt; 整个项目绝大部分使用纯代码进行&lt;code class=&quot;highlighter-rouge&quot;&gt;View层&lt;/code&gt;的编写, 且代码规范性较强, 也没有过多的继承, 所以代码可读性高。布局方式采用&lt;code class=&quot;highlighter-rouge&quot;&gt;autolayout&lt;/code&gt;方式, 在具体模块中还以&lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt;为功能模块进行开发, 使&lt;code class=&quot;highlighter-rouge&quot;&gt;View层&lt;/code&gt;的代码更加清晰。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;业务层。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的主要业务逻辑当然是有&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;来承担的, 另外还配合了&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;(或者说路由)的使用, 在页面之间的跳转逻辑上实现了统一管理。这样就减少了横向依赖, 也让跨层访问的业务更加容易开展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络层。&lt;/strong&gt; 项目中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;进行数据请求, &lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;已经做了足够多的工作了, 包括交付给给业务层封装成对象的数据、网络层的各种优化工作等。也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONRPCKit&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;APIKit&lt;/code&gt;的框架去进行数据请求, 这在&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016#t9&quot;&gt;接下来的文章&lt;/a&gt;中会具体分析, 这些请求就是关于智能合约调用的。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;客户端在区块链中相当于一个轻量节点, 从公链上请求数据的话, 需要依靠某个全节点。就如图中的URL, 就可以理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;客户端取链上数据所借助的全节点。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031183501958.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;数据层。&lt;/strong&gt; 主要的数据持有化方式使用Realm数据库, 这是个轻量级、高性能、高效率、可跨平台的移动数据库。核心数据如钱包账户、交易、&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;等都存储于此。另外, 也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;来保存比较重要且轻量的数据, 如私钥、应用锁设置和密码、最近使用的钱包、&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;cookies&lt;/code&gt;。还有一些数据, 如当前货币种类、启动次数、当前版本启动次数、是否分享、是否评分等等, 都是采用&lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;的形式进行数据保存的。&lt;/p&gt;

&lt;h2 id=&quot;项目流程&quot;&gt;项目流程&lt;/h2&gt;

&lt;p&gt;从程序启动&lt;code class=&quot;highlighter-rouge&quot;&gt;APPDelegate&lt;/code&gt;开始, &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;作为app间的路由, 判断当前app内是否有钱包账户, 若没有则进入以&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeViewController&lt;/code&gt;为根控制器的页面进行钱包账户创建; 若有最近使用过的钱包账户, 则进入app内部的路由&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;。在这里, 钱包账号创建的页面和钱包使用页面已经划分为两条业务线。其实从业务角度来说, 可以也可以理解为这是&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;内部的两个应用。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102171823364.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;进入&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;后, 才真正开始创建&lt;code class=&quot;highlighter-rouge&quot;&gt;TabBarController&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationController&lt;/code&gt;以及各个业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;。上图中明确表示了这个过程, 也对主要的业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和其对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;进行了说明, 且同颜色的之间是一一对应的。&lt;/p&gt;

&lt;h2 id=&quot;主体框架的功能划分&quot;&gt;主体框架的功能划分&lt;/h2&gt;

&lt;p&gt;本文前面介绍过项目的目录结构了, 但这里所说的框架并不是按照目录结构的角度, 而是延续上面的项目流程的角度。首先, 我将按源码进行原模原样的表述, 然后我将提出对于其功能划分的一些自己的建议。因为我认为某写业务模块的功能是应该出现在另一个业务模块中的。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102171757143.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;appdelegate&quot;&gt;AppDelegate&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;需要承担的是程序的初始化以及整个应用生命周期的所影响的业务逻辑。
&lt;strong&gt;ProtectionCoordinator。&lt;/strong&gt; 功能是在保护应用的方面, 如应用锁、解锁以及当应用失去焦点后保护应用内部页面不被暴露的功能。
&lt;strong&gt;URLNavigatorCoordinator。&lt;/strong&gt; 功能是由 &lt;a href=&quot;https://github.com/devxoul/URLNavigator&quot;&gt;URLNavigator&lt;/a&gt;和 &lt;a href=&quot;https://github.com/BranchMetrics/ios-branch-deep-linking&quot;&gt;Branch&lt;/a&gt;的功能组成的。前者是对&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;进行监听的, 并在检测到约定好的URL了进行映射和处理。后者是关于延迟深度链接(Deferred Deep Linking)的。
&lt;strong&gt;Branch。&lt;/strong&gt; 和上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;是同一个, 在启动应用时进行初始化, 并将在应用程序生命周期中多次调用，当应用由后台向前台切换时也将调用。用于处理从外部跳转入后, 根据传入的参数要跳转进入指定的页面。
&lt;strong&gt;EtherKeystore。&lt;/strong&gt; 应用的核心业务的处理类, 有钱包管理(创建、删除、导入、导出)、助记词转化、签名工作、私钥管理等功能。它的具体业务将会在&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016&quot;&gt;下篇文章&lt;/a&gt;中具体介绍。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProtectionCoordinator&lt;/code&gt;需要跟随应用的生命周期进行功能的调整。&lt;code class=&quot;highlighter-rouge&quot;&gt;URLNavigatorCoordinator&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;navigator&lt;/code&gt;用来处理响应&lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html&quot;&gt;URL Scheme&lt;/a&gt;这种由其它 App的跳入, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;用来处理响应&lt;a href=&quot;https://developer.apple.com/ios/universal-links/&quot;&gt;Universal Links&lt;/a&gt;这种通用链接的跳入形式。
而&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;在这里只是作为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;初始化的一个参数, 并无实际使用。这也是我个人认为在这个业务模块并不应出现的类, 当然后面我也会细聊我为什么这么说? 我也将会给出我自己的建议。&lt;/p&gt;

&lt;h3 id=&quot;appcoordinator&quot;&gt;AppCoordinator&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;(或者说路由)在业务上一般可以分为 App间的路由和 App内的路由。而在此项目中, 因为还有&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;, 所以当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;是一个 App间的路由, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;是一个App内的路由。所以在项目中&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;承担了一些应用层的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initializers。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CrashReportInitializer&lt;/code&gt;是统计崩溃的, 用到&lt;a href=&quot;https://get.fabric.io/&quot;&gt;Fabric&lt;/a&gt;的一些工具, 如 Crashlytics、Answers等。而&lt;code class=&quot;highlighter-rouge&quot;&gt;SkipBackupFilesInitializer&lt;/code&gt;是防止文件被备份的。
&lt;strong&gt;AppTracker。&lt;/strong&gt; 记录应用启动次数、当前版本启动次数、是否分享、是否评分等一些仅保存于本地的应用层统计数据。
&lt;strong&gt;AppGlobalStyle。&lt;/strong&gt; 应用统一的风格, 包括导航栏外观、UITexfield外观、TableView分割线风格(边距, 颜色)等。这个统一风格是整个应用一致的, 一定要区别于统一管理的字体和颜色的类(如项目中的Colors类和AppStyle类)。
&lt;strong&gt;PushNotificationsRegistrar。&lt;/strong&gt; 管理远程推送授权和注册相关的业务。
&lt;strong&gt;BranchEventClosure。&lt;/strong&gt; 在从外部跳入当前 App后, 由&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;的操作调起的, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;BranchEventClosure&lt;/code&gt;的 block中, 由下层的&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来控制将要跳入的目标页面。但我个人认为, 它并不应该出现在这里, 后面建议中会具体说明原因。&lt;/p&gt;

&lt;h3 id=&quot;incoodinator&quot;&gt;InCoodinator&lt;/h3&gt;

&lt;p&gt;这是 App内的路由, 与具体业务模块有间接联系的路由, 负责创建和管理各个业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和各个业务模块之间的跳转逻辑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CheckDeviceCoordinator。&lt;/strong&gt; 检测当前设备是否是越狱设备, 如果是越狱设备则会提醒用户不安全, 因为这样在 &lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;中存储的钱包账户的私钥就可能被盗。毕竟在区块链中, 私钥是你作为钱包主人的唯一证明。
&lt;strong&gt;HelpsCoordinator。&lt;/strong&gt; 通过本地对启动次数的监听, 在指定的启动次数时对用户进行应用分享和评分的提醒。
&lt;strong&gt;URLNavigable、URLNavigator。&lt;/strong&gt; 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;中进行监听, 一旦检测到有约定好的URL后, 可以在对应的block中做出想要的映射或者处理。如下图。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/2018110216360916.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;MigrationInitializer、Realm、WalletSession。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库和数据库迁移的处理。这里其实不是特指数据库, 而是指所有与具体业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;创建时所使用的公共类。所以这里包括&lt;code class=&quot;highlighter-rouge&quot;&gt;WalletSession&lt;/code&gt;等类。
&lt;strong&gt;Coordinators。&lt;/strong&gt; 指&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;所管理的具体业务模块的 Coordinator, 包括&lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TokensCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;settingsCoordinator&lt;/code&gt;。
&lt;strong&gt;TabBarController。&lt;/strong&gt; 创建上述&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinators&lt;/code&gt;中各个具体业务模块的 Coordinator所管理的&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationController&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&quot;直抒己见&quot;&gt;直抒己见&lt;/h3&gt;

&lt;p&gt;在上面的文章中, 我也说过有一些地方, 我个人认为是可以做一些调整的。当然, 如果你没有我这样的强迫症, 可以略过。
先来看一个理念。在没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;的项目中, 其启动流程和各个&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;之间的创建应该是这样的(&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.4g9db2ybm&quot;&gt;原图出处&lt;/a&gt;):&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181101181606999.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;然而在使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;的项目中, 应该是这样的(&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.4g9db2ybm&quot;&gt;原图出处&lt;/a&gt;):&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181101182031878.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;当然, 在这个项目中, 项目的架构模式并不完全是第二张图这样。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;将第二张图中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;细分为了两个, 即应用间和应用内的路由。而在&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;项目中, 图二中的显然只是相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;, 而从外部跳转(包括从其它 App跳转也包括从通用链接跳转)进入当前 App的管理是&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;来处理的。这个理念懂了, 我们进入主题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一, 将 App外部跳转的事务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;。&lt;/strong&gt; 如果按照上面所说的理念, 那么在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中, 其实应该把所有与外部跳转的事务交由&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;来做。也就是可以考虑将&lt;code class=&quot;highlighter-rouge&quot;&gt;URLNavigatorCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;这些放到&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中只留下与应用的初始化以及整个应用生命周期的所影响的业务逻辑。
&lt;strong&gt;第二, 将于具体的业务模块切换的事务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;。&lt;/strong&gt;  在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;BranchEventClosure&lt;/code&gt;, 是用来通过&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来控制目标页面的跳转的。这些与具体业务模块的跳转逻辑有关的业务就应该交于内部路由&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来做。&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中只留下与外部跳转和应用层有关的业务。
如果这样多了的话, 功能划分就有变化了, 如下图, 绿色边框的是新增的功能:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102171638114.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;到此为止 Trust Wallet项目以 iOS的角度, 按照架构和主要功能对其源码解析完了。然后, 真正关于区块链的核心功能, 如智能合约调用、私钥公钥管理等, 会以&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;钱包为例让你逐步理解。具体请阅读下一篇&lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/83862016&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;。&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Nov 2018 02:44:45 +0800</pubDate>
        <link>http://localhost:4000/2018/Trust/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/Trust/</guid>
        
        <category>区块链</category>
        
        
        <category>区块链</category>
        
      </item>
    
  </channel>
</rss>
