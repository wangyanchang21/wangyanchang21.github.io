<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DCSnail</title>
    <description>iOS, watchOS, swifter. is migrating...</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 29 Jun 2019 18:27:31 +0800</pubDate>
    <lastBuildDate>Sat, 29 Jun 2019 18:27:31 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>由Trust Wallet理解以太坊钱包管理和智能合约</title>
        <description>&lt;p&gt;在前一篇文章中, 已经介绍过&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的项目架构、业务流程等了。这篇文章将会解读一些核心的功能, 包括前一篇文章提到的&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;这个业务类, 还有网络层的如何调用智能合约、其它调用合约的方式, 以及以太坊交易的结构和流程等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#钱包管理&quot;&gt;钱包管理&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#钱包创建&quot;&gt;钱包创建&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#钱包的导入&quot;&gt;钱包的导入&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#钱包导出删除等&quot;&gt;钱包导出、删除等&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#etherkeystore-模块结构图&quot;&gt;EtherKeystore 模块结构图&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#智能合约&quot;&gt;智能合约&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#合约调用方式&quot;&gt;合约调用方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#合约调用&quot;&gt;合约调用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#网络层其他请求&quot;&gt;网络层其他请求&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#交易&quot;&gt;交易&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#交易的结构&quot;&gt;交易的结构&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#交易的流程&quot;&gt;交易的流程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;钱包管理&quot;&gt;钱包管理&lt;/h2&gt;

&lt;p&gt;钱包管理就要提到一个类&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;, 应用的核心业务的处理类, 有钱包管理(创建、删除、导入、导出)、助记词转化、签名工作、私钥管理等功能。
&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;中使用了由&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;开源的了两个库: &lt;a href=&quot;https://github.com/TrustWallet/trust-keystore&quot;&gt;TrustKeystore&lt;/a&gt;: 用于管理钱包的通用以太坊密钥库。&lt;a href=&quot;https://github.com/TrustWallet/trust-core&quot;&gt;TrustCore&lt;/a&gt;: 区块链核心的数据结构和算法。还有&lt;a href=&quot;https://github.com/krzyzanowskim/CryptoSwift&quot;&gt;CryptoSwift&lt;/a&gt;, 一个标准的安全加密算法集合的库。&lt;/p&gt;

&lt;h3 id=&quot;钱包创建&quot;&gt;钱包创建&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;类中, 封装了钱包的创建, 主要使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustKeystore&lt;/code&gt;库、&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCore&lt;/code&gt;库中关于公私钥和地址的API、以及密码学的库&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoSwift&lt;/code&gt;。我下面所说的整个流程也包括这些库中的源码逻辑, 先创建密钥对(或者助记词), 再利用本地生成的随机密码对密钥进行加密保存, 然后生成钱包, 将钱包、获取私钥的密码以及&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;保存到本地。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;默认的方式是生成助记词, 这种方式其实是私钥的一种管理方式, 助记词是由私钥通过某种算法派生出来的, &lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCore&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Crypto&lt;/code&gt;就是这个功能。而且当你用到私钥的时候, 你还可以把你的助记词通过对应的算法在转译成私钥。所以它只是一种私钥的存储方式, 下面文章中以私钥为例来讲述整个流程。&lt;/p&gt;

&lt;h4 id=&quot;创建公钥私钥&quot;&gt;创建公钥私钥&lt;/h4&gt;

&lt;p&gt;创建钱包就相当于生成一对密钥, 公钥(PublicKey)和私钥(PrivateKey)。公钥其实就相当于你账户在区块链中的地址(Address); 私钥就相当于你钱包的账号密码, 它是证明你是钱包主人的唯一证明, 一旦丢失就不可找回。当然, 公钥并不完全等于地址, 地址是由公钥经过一系列的算法生成的, 需要经过&lt;code class=&quot;highlighter-rouge&quot;&gt;SHA3-256&lt;/code&gt;(Keccak)哈希然后转化为符合&lt;code class=&quot;highlighter-rouge&quot;&gt;EIP55&lt;/code&gt;规则的字符串。&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keysize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面这段伪代码中, generateKeys方法把 keysize作为输入, 来产生一对公钥和私钥。私钥sk被安全保存## ，并用来签名一段消息；公钥pk是人人都可以找到的，拿到它，就可以用来验证你的签名。下图是&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCore&lt;/code&gt;中对以太坊私钥和地址的&lt;code class=&quot;highlighter-rouge&quot;&gt;keysize&lt;/code&gt;定义, 私钥是32字节, 公钥地址是20字节, 所以十六进制的私钥长度为64位, 而公钥地址长度为40位。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/20181107182953343.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;具体来说, 创建公钥和私钥的功能是由&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCore&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;PrivateKey&lt;/code&gt;来完成的。而且是通过苹果官方的&lt;code class=&quot;highlighter-rouge&quot;&gt;Security&lt;/code&gt;库来创建的公钥和私钥, 经过整理密钥对生成和获取过程如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getPrivatePublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;privateAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kSecAttrIsExtractable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kSecAttrKeyType&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSecAttrKeyTypeEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kSecAttrKeySizeInBits&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;kSecPrivateKeyAttrs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privateAttributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// PrivateKey To String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;privateKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecKeyCreateRandomKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to generate key pair&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;priRepresentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecKeyCopyExternalRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;privateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to extract new private key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;priRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replaceSubrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeatElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;priData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;priString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;priData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;priString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%02x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    
    &lt;span class=&quot;c1&quot;&gt;// PublicKey To String&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publicKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecKeyCopyPublicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;privateKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to get publickey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pubRepresentation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SecKeyCopyExternalRepresentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed to extract new public key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pubRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;replaceSubrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;..&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;repeatElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pubData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pubRepresentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;suffix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pubString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pubString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%02x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;priString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pubString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;使用随机密码对私钥加密&quot;&gt;使用随机密码对私钥加密&lt;/h4&gt;

&lt;p&gt;在生成了私钥之后, 将在&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKeyHeader&lt;/code&gt;类中, 这里使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;CryptoSwift&lt;/code&gt;(安全加密算法集合的库)对私钥进行加密。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AES-128&lt;/code&gt;算法进行对称加密后, 将这些数据以&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKeyHeader&lt;/code&gt;类型保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;中。&lt;/p&gt;

&lt;h4 id=&quot;创建-wallet&quot;&gt;创建 Wallet&lt;/h4&gt;

&lt;p&gt;在前两个步骤的基础之上, 就可以创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Wallet&lt;/code&gt;了, 并将&lt;code class=&quot;highlighter-rouge&quot;&gt;Wallet&lt;/code&gt;加入到当前的账户中。也会计算或者获取一些参数存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;Wallet&lt;/code&gt;中, 如公钥地址Address, Account、&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;等。&lt;/p&gt;

&lt;h4 id=&quot;保存到本地&quot;&gt;保存到本地&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KeyStore&lt;/code&gt;会将当前钱包账户的&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;数据存储在本地文件中。文件以”UTC+时间戳+钱包唯一标识”为名称存储在本地, 其中存储的是上面&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;的数据。这些数据用户每次启动时, 将会由这些数据再次生成所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Wallet&lt;/code&gt;数据。
当然, 私钥当然也是需要保存的, &lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;前一篇文章&lt;/a&gt;中说过了, 这样的敏感信息保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;中。但&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;并不是直接存储这私钥, 而是将获取私钥的密码保存在其中了。以钱包的id为key值, 将获取私钥的密码保存子&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;之中, 拿出密码后, 再使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;进行&lt;code class=&quot;highlighter-rouge&quot;&gt;AES-128&lt;/code&gt;对称解密, 获取私钥, 便可以使用了。所以, &lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;这个类的主要功能是对私钥和助记词的管理以及对私钥的加解密。&lt;/p&gt;

&lt;p&gt;另外, 这样拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;PrivateKey&lt;/code&gt;的钱包账户是不需要存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库中的。只有一种需要保存到本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库中, 那就是导入地址钱包, 下面将会说明。&lt;/p&gt;

&lt;h3 id=&quot;钱包的导入&quot;&gt;钱包的导入&lt;/h3&gt;

&lt;p&gt;钱包导入相对于钱包的创建来说, 只是不需要自己去生成公钥和私钥对了, 剩下的流程还是一样的。当然导入时会有三种方式, 除了之前提到的私钥和助记词的方式, 还有地址的方式。
钱包地址是公开的, 当然你也可以导入, 也可以查看这个钱包的任何数据, 但因为你不具备它的私钥, 所以你不可以进行签名或者说任何写入区块链的操作。所以这种方式, 就不需要&lt;code class=&quot;highlighter-rouge&quot;&gt;KeyStore&lt;/code&gt;进行操作了, 只需要&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;进行本地操作, 将其放入本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库中, 那就是导入地址钱包。当启动应用时, 将会以两者组成的数据为本地钱包列表。&lt;/p&gt;

&lt;h3 id=&quot;钱包导出删除等&quot;&gt;钱包导出、删除等&lt;/h3&gt;

&lt;p&gt;钱包导出, 当然也会分三种方式, 私钥和助记词的方式, 还有地址的方式。在&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;中将密码取出, 然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;解密到私钥或者助记词, 导出。地址的方式, 就是直接导出地址。&lt;/p&gt;

&lt;p&gt;如果你把上面的钱包创建条理理清楚了, 你就可以想到删除只是钱包创建的逆过程, 但没有那么复杂。只需要验证你的私钥是正确的就可以将你本地&lt;code class=&quot;highlighter-rouge&quot;&gt;KeystoreKey&lt;/code&gt;删除了。&lt;/p&gt;

&lt;h3 id=&quot;etherkeystore-模块结构图&quot;&gt;EtherKeystore 模块结构图&lt;/h3&gt;

&lt;p&gt;下图中画了 &lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;在创建或者导入钱包时的流程, 可一清楚的看到这个模块的结构。绿色的部分是&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustCore&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustKeystore&lt;/code&gt;库中的调用, 浅蓝色是数据层的一些处理。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/20181109110331147.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;智能合约&quot;&gt;智能合约&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;前一篇文章&lt;/a&gt;中的网络层中, 对只能合约以及具体网络层业务逻辑没有做详细说明。这里将会讨论几个问题, 网络层具体方案, 以太坊智能合约的调用。&lt;/p&gt;

&lt;h3 id=&quot;合约调用方式&quot;&gt;合约调用方式&lt;/h3&gt;

&lt;p&gt;在以太坊的官方文档中提供了两种 API, 一个种是&lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JSON-RPC&quot;&gt;JSON RPC API&lt;/a&gt;, 一种是&lt;a href=&quot;https://github.com/ethereum/wiki/wiki/JavaScript-API&quot;&gt;JavaScript API&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;javascript-api&quot;&gt;JavaScript API&lt;/h4&gt;

&lt;p&gt;虽然看起来是两种 API, 其实后者是通过RPC调用与本地节点进行通信的。也就可以理解为 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript API&lt;/code&gt;是对 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON RPC API&lt;/code&gt;的封装, 方便了从JavaScript应用程序内部与&lt;code class=&quot;highlighter-rouge&quot;&gt;ethereum节点&lt;/code&gt;通信。官方开源的库&lt;a href=&quot;https://github.com/ethereum/web3.js&quot;&gt;web3.js&lt;/a&gt;就是做了这个事情。&lt;/p&gt;

&lt;h4 id=&quot;json-rpc-api&quot;&gt;JSON RPC API&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jsonrpc.org/specification&quot;&gt;JSON-RPC&lt;/a&gt;是一种轻量级的远程过程调用(RPC)协议。该规范主要定义了一些数据结构和处理的规则。它与传输无关, 因为这些概念可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;, 或者其它的消息传递环境中使用。它使用 JSON(&lt;a href=&quot;http://www.ietf.org/rfc/rfc4627.txt&quot;&gt;RFC 4627&lt;/a&gt;)作为数据格式。&lt;/p&gt;

&lt;p&gt;默认的JSON-RPC端点：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Client&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;URL&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;http://localhost:8545&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Go&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;http://localhost:8545&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Py&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;http://localhost:4000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Parity&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;http://localhost:8545&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;RPC的支持情况:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;cpp-ethereum&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;go-ethereum&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;py-ethereum&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;parity&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSON-RPC 1.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;JSON-RPC 2.0&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Batch requests&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;IPC&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;WS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;✓&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;合约调用&quot;&gt;合约调用&lt;/h3&gt;

&lt;p&gt;当然, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的 iOS端是通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;JSON RPC Over HTTP&lt;/code&gt;的方式进行智能合约调用的。项目中针对合约调用的请求, 网络层的设计是 &lt;a href=&quot;https://github.com/ishkawa/APIKit&quot;&gt;APIKit&lt;/a&gt; + &lt;a href=&quot;https://github.com/bricklife/JSONRPCKit&quot;&gt;JSONRPCKit&lt;/a&gt; 的方式。&lt;/p&gt;

&lt;h4 id=&quot;json-rpc-over-http&quot;&gt;JSON RPC Over HTTP&lt;/h4&gt;

&lt;p&gt;在项目中, 以太坊智能合约调用都是&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON RPC Over HTTP&lt;/code&gt;的方式, 而且所使用的以太坊节点&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;前一篇文章&lt;/a&gt;网络层中就提到过。&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;remoteURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;urlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://api.trustwalletapp.com&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;classic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://classic.trustwalletapp.com&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;callisto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://callisto.trustwalletapp.com&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;poa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://poa.trustwalletapp.com&quot;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;gochain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://gochain.trustwalletapp.com&quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;网络层结构应该如下图所示:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/20181109180054191.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;当你明白这种网络结构后, 在来看&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;中, 统一使用&lt;code class=&quot;highlighter-rouge&quot;&gt;xxxRequest&lt;/code&gt;的命名来封装&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONRPCKit&lt;/code&gt;的应用组件。其中定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;parameters&lt;/code&gt;、response的转化等, 这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;method&lt;/code&gt;就是调用以太坊智能合约的接口名称。项目中, 统一使用&lt;code class=&quot;highlighter-rouge&quot;&gt;xxxProvider&lt;/code&gt;的命名, 按功能对&lt;code class=&quot;highlighter-rouge&quot;&gt;APIKit&lt;/code&gt;的请求组件进行封装。当然, 没有这层抽象的HTTP请求也是可以的。&lt;/p&gt;

&lt;p&gt;下面图片中, &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;中涉及到一些 API: &lt;code class=&quot;highlighter-rouge&quot;&gt;eth_estimateGas&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_sendRawTransaction&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_gasPrice&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_blockNumber&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_getTransactionByHash&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_call&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_getBalance&lt;/code&gt;。下面详细列出了项目中合约调用的类和具体使用的以太坊 API, 它们是一一对应的关系。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/2018110917531565.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;web3swift&quot;&gt;Web3.swift&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;项目中并没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;web3&lt;/code&gt;的方式进行合约调用, 但是我还是想说一说这种方式。这是因为除了以太坊官方的对 JavaScript API的&lt;code class=&quot;highlighter-rouge&quot;&gt;web3&lt;/code&gt;库以外, 还有一个纯Swift写的库&lt;a href=&quot;https://github.com/Boilertalk/Web3.swift&quot;&gt;Web3.swift&lt;/a&gt;。它是可以用于在以太坊网络中签署交易并与智能合约进行交互, 而且可以直接使用于你的iOS客户端。假如你的网络层用&lt;code class=&quot;highlighter-rouge&quot;&gt;Web3.swift&lt;/code&gt;替换&lt;code class=&quot;highlighter-rouge&quot;&gt;APIKit&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;JSONRPCKit&lt;/code&gt;这样的话, 将会降低网络层结构复杂度, 且代码简洁性也提高了。&lt;/p&gt;

&lt;h3 id=&quot;网络层其他请求&quot;&gt;网络层其他请求&lt;/h3&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;中, 获取区块链上的数据, 其实分为两种, 一种是上面提到的直接通过智能合约获取的数据。另一种就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;官网已经封装过的一些接口, 它们是关于多币种的, 大多需要在区块链中去查找, 接口不单一且有大工作量的请求, 如transactions, getTokes等。这些接口是直接使用网络库&lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;进行封装的, 而没有调用智能合约。而这些&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP&lt;/code&gt;请求的服务器是:&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;trustAPI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://public.trustwalletapp.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustAPI&lt;/code&gt;类中将这些接口清楚的列举了出来, 并且将它们集体封装在&lt;code class=&quot;highlighter-rouge&quot;&gt;TrustNetwork&lt;/code&gt;类中来管理。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/20181109182907445.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;到这里, 就将&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;前一篇文章&lt;/a&gt;所遗留的网络层的详情补充完整了。&lt;/p&gt;

&lt;h2 id=&quot;交易&quot;&gt;交易&lt;/h2&gt;

&lt;p&gt;交易, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt;, 我这里是指转账交易。上面简单介绍过以太坊上的交易, 并了解交易的 API是 &lt;code class=&quot;highlighter-rouge&quot;&gt;eth_sendRawTransaction&lt;/code&gt;。下面介绍下在项目中, 转账交易的结构, 以及转账交易在&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;中分别是怎样的流程。&lt;/p&gt;

&lt;h3 id=&quot;交易的结构&quot;&gt;交易的结构&lt;/h3&gt;

&lt;p&gt;在项目的主目录中, 有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer&lt;/code&gt;模块, 这个模块主要功能就是处理转账交易。在形成一个交易前, 将以定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer&lt;/code&gt;类为基础, 封装出一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt;的结构, 这个结构中包含着发送地址、接收地址、币的数量、交易费等等所有交易相关的数据。最后定义&lt;code class=&quot;highlighter-rouge&quot;&gt;TransactionConfigurator&lt;/code&gt;类, 对交易进行最外层的业务管理和校验。在&lt;code class=&quot;highlighter-rouge&quot;&gt;TransactionConfigurator&lt;/code&gt;中经过校验、签名之后的交易才会发送给以太坊节点, 并在矿工挖到矿并将此交易放入区块中, 当前&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;的转账才算完成。&lt;/p&gt;

&lt;h4 id=&quot;transfer&quot;&gt;Transfer&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer&lt;/code&gt;中主要包含当前转账发起方的&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;相关的一些数据, 如地址、合约等等。而且它有类型之分, 及&lt;code class=&quot;highlighter-rouge&quot;&gt;TransferType&lt;/code&gt;的三种类型, 分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;Coin&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC20&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Dapp&lt;/code&gt;, 前两种是原生App的方式, 后一种是浏览器中 DApp的方式。&lt;/p&gt;

&lt;h4 id=&quot;unconfirmedtransaction&quot;&gt;UnconfirmedTransaction&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UnconfirmedTransaction&lt;/code&gt;中, 主要包含当前&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;的一些信息, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer&lt;/code&gt;。还有一个转账接收方的信息, 如地址、币的数量、交易费、Data等等。&lt;/p&gt;

&lt;h4 id=&quot;transactionconfigurator&quot;&gt;TransactionConfigurator&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TransactionConfigurator&lt;/code&gt;类, 对交易进行最外层的业务管理和校验。它其中包含全量的&lt;code class=&quot;highlighter-rouge&quot;&gt;UnconfirmedTransaction&lt;/code&gt;数据, 且还有校验余额是否有效、交易费、交易限制等功能, 最终生成一个经过校验后的完整&lt;code class=&quot;highlighter-rouge&quot;&gt;SignTransaction&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;dappaction&quot;&gt;DappAction&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DappAction&lt;/code&gt;只在&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;进行转账交易时, 才能使用到的类。而上面的三个无论是&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;还是&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;都需要使用到的交易结构类。&lt;code class=&quot;highlighter-rouge&quot;&gt;DappAction&lt;/code&gt;会将浏览器中传入的消息进行解析, 得到&lt;code class=&quot;highlighter-rouge&quot;&gt;Method&lt;/code&gt;以及其它数据, 并封装在&lt;code class=&quot;highlighter-rouge&quot;&gt;DappCommand&lt;/code&gt;里面。然后以浏览器的web标题和URL生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;DAppRequester&lt;/code&gt;等元素生成&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer&lt;/code&gt;。最终这两者, 共同生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;DappAction&lt;/code&gt;来决定需要进行哪种操作、需要调用合约中的哪种API、还有交易的一些数据等。&lt;/p&gt;

&lt;h4 id=&quot;交易结构图&quot;&gt;交易结构图&lt;/h4&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/20181114104214461.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;交易的流程&quot;&gt;交易的流程&lt;/h3&gt;

&lt;p&gt;交易流程自然也是分成两, 一种是&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;中发起的交易, 一种是&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;在浏览器中发起的交易。之前提及的交易结构会在流程中以数据的形式作为重要的参与部分, 这里主要说明交易从发起至交易完成的主要流程, 以及需要调用哪些以太坊智能合约的 API。&lt;/p&gt;

&lt;h4 id=&quot;原生app发起的交易&quot;&gt;原生App发起的交易&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;交易发起。&lt;/strong&gt; 在&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;的钱包首页有着当前账户下的&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;列表, 而发起的转账交易是在某个具体&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;中操作的。所以当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;Transfer&lt;/code&gt;是已经具备的, 而具体的交易接收地址、币的数量以及gas费就需要用户在&lt;code class=&quot;highlighter-rouge&quot;&gt;SendCoordinator&lt;/code&gt;的模块中自行输入了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;构建交易数据。&lt;/strong&gt; 交易发起后, 我们就具备了构建&lt;code class=&quot;highlighter-rouge&quot;&gt;UnconfirmedTransaction&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;TransactionConfigurator&lt;/code&gt;的所有数据了。它们的具体情况, 前面已经说明过了, 就不赘述了。构建完成&lt;code class=&quot;highlighter-rouge&quot;&gt;TransactionConfigurator&lt;/code&gt;后, 进入流程中的&lt;code class=&quot;highlighter-rouge&quot;&gt;ConfirmCoordinator&lt;/code&gt;模块, 它的功能是让用户来确认交易详情, 以及核实当前&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;的余额是否足够等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;智能合约调用。&lt;/strong&gt; 当用户确认且余额足够支持转账的情况下, 就需要&lt;code class=&quot;highlighter-rouge&quot;&gt;SendTransactionCoordinator&lt;/code&gt;来进行核心的转账交易业务, 所以它是一个纯业务的功能类, 并无页面。这时候要根据在&lt;code class=&quot;highlighter-rouge&quot;&gt;TransactionConfigurator&lt;/code&gt;经过校验的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt;, 判断其&lt;code class=&quot;highlighter-rouge&quot;&gt;noce&lt;/code&gt;是否大于0。如果不大于0, 则需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON RPC Over HTTP&lt;/code&gt;的方式调用以太坊智能合约的API, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_getTransactionByHash&lt;/code&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;nonce&lt;/code&gt;进行更新, 然后重新进行判断; 如果大于0, 则&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;对交易进行签名, 然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON RPC Over HTTP&lt;/code&gt;的方式调用以太坊智能合约的API, 即&lt;code class=&quot;highlighter-rouge&quot;&gt;eth_sendRawTransaction&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;交易回调处理。&lt;/strong&gt; 交易结果产生后, 要回调至发起的模块, 还要处理后续的业务。如果交易成功, 会将交易保存到本地的&lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库等; 如果交易失败, 提示用户交易失败。&lt;/p&gt;

&lt;p&gt;到此, 转账交易的流程的闭环完成。在后面的图中也对整个交易流程做了一个梳理。&lt;/p&gt;

&lt;h4 id=&quot;dapp发起的交易&quot;&gt;DApp发起的交易&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;具有一个功能齐全的&lt;code class=&quot;highlighter-rouge&quot;&gt;Web3&lt;/code&gt;浏览器，可与任何分布式的应用程式(DApp)配合使用。这个情景就是当转账交易发生在&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;中发起的情况。交易整体的流程与&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;中基本一致, 且交易的核心数据结构一致。它们的区别在于发起方式、回调处理, 以及&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;中要多一些解析的过程。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;交易发起。&lt;/strong&gt; 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Web3&lt;/code&gt;浏览器中的&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;中, 发起转账交易, 发起方式就是&lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS原生&lt;/code&gt;。通过传入的数据, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserCoordinator&lt;/code&gt;模块中, 将数据进行解析。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;解析。&lt;/strong&gt; 通过&lt;code class=&quot;highlighter-rouge&quot;&gt;DAppAction&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;DappCommand&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;DAppRequester&lt;/code&gt;等类进行解析, 完成后, 封装入&lt;code class=&quot;highlighter-rouge&quot;&gt;DAppAction&lt;/code&gt;内, 来决定需要进行哪种操作、需要调用合约中的哪种API。它有6种响应事件, 分别是:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.signMessage&lt;/li&gt;
  &lt;li&gt;2.signPersonalMessage&lt;/li&gt;
  &lt;li&gt;3.signTypedMessage&lt;/li&gt;
  &lt;li&gt;4.signTransaction&lt;/li&gt;
  &lt;li&gt;5.sendTransaction&lt;/li&gt;
  &lt;li&gt;6.unknown&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;构建交易数据&lt;/strong&gt; 和 &lt;strong&gt;智能合约调用。&lt;/strong&gt; 这两个步骤和原生的之间基本一致, 都是通过数据构建出&lt;code class=&quot;highlighter-rouge&quot;&gt;Transaction&lt;/code&gt;, 用来做交易准备。然后进行校验, 再调用智能合约。所以就不具体说明了, 请参照&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;交易回调处理。&lt;/strong&gt; 交易结果产生后, 也要回调至发起的模块, 来处理后续的业务。这里与&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;区别是, 除了需要完成&lt;code class=&quot;highlighter-rouge&quot;&gt;原生App&lt;/code&gt;在成功或失败下完成的流程外, 还需要将交易结果再通知到&lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;, 这样才能形成完整的闭环。所以, 无论回调结果如何, 都会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS原生&lt;/code&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;JS&lt;/code&gt;的方式通知&lt;code class=&quot;highlighter-rouge&quot;&gt;Web&lt;/code&gt;交易的具体情况。&lt;/p&gt;

&lt;h4 id=&quot;交易流程图&quot;&gt;交易流程图&lt;/h4&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-2/20181114151958473.png&quot; width=&quot;80%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;项目到这里基本就很清晰了, 这两篇文章虽然只是对&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust 
wallet&lt;/code&gt;的解读, 很局限。但是由它们能延伸到的知识, 如以太坊的智能合约的知识、钱包和私钥管理的知识等等, 还有你对区块链的认知, 这些不是狭义的。所以无论你认为区块链是好是坏, 或者有没有实际的应用和市场的欢迎, 这门技术都带来了无限创新。&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85-Trust%E9%A1%B9%E7%9B%AE%E8%A7%A3%E8%AF%BB%E4%B9%8B%E6%9E%B6%E6%9E%84%E5%92%8C%E6%B5%81%E7%A8%8B&quot;&gt;以太坊钱包 Trust项目解读之架构和流程&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Nov 2018 07:07:17 +0800</pubDate>
        <link>http://localhost:4000/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</guid>
        
        <category>区块链</category>
        
        
        <category>区块链</category>
        
      </item>
    
      <item>
        <title>以太坊钱包 Trust项目解读之架构和流程</title>
        <description>&lt;p&gt;解读以太坊钱包 Trust App，从架构、流程、功能模块的角度进行分析。并结合区块链和智能合约来介绍以太坊交易的结构和流程等业务。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#前言&quot;&gt;前言&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#以太坊钱包平台介绍&quot;&gt;以太坊钱包平台介绍&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mist&quot;&gt;Mist&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#parity&quot;&gt;Parity&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#trust&quot;&gt;Trust&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#imtoken&quot;&gt;imToken&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#myetherwallet&quot;&gt;MyEtherWallet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#metamask&quot;&gt;MetaMask&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#主要模块&quot;&gt;主要模块&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#项目架构&quot;&gt;项目架构&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#项目流程&quot;&gt;项目流程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;由于前阵子工作涉及到区块链方面的业务, 再加上自己对技术的热忱, 本人也是不断地学(恶)习(补)这方面的知识。在 github上的有很多优秀的开源钱包的代码, 比如说今天要分享的iOS版本的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;, 还有这个月24号刚刚官宣开源的 &lt;code class=&quot;highlighter-rouge&quot;&gt;imToken&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;文章中, 会涉及到一些区块链的基础知识如以太坊、智能合约、节点、Token、地址等等, 这些基础知识就不介绍了, 还请自行查阅吧。&lt;/p&gt;

&lt;h2 id=&quot;以太坊钱包平台介绍&quot;&gt;以太坊钱包平台介绍&lt;/h2&gt;

&lt;p&gt;首先, 还是先介绍下市场上常用的一些以太坊钱包吧, 至少让大家了解一下这些平台。&lt;/p&gt;

&lt;h3 id=&quot;mist&quot;&gt;Mist&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Mist&lt;/code&gt;是一个全节点的钱包, 以太坊的官方钱包。&lt;br /&gt;
官方地址: &lt;a href=&quot;https://ethereum.org/&quot;&gt;ethereum&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;parity&quot;&gt;Parity&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Parity&lt;/code&gt;也是一个全节点钱包, 原以太坊基金会部分成员开发的。&lt;br /&gt;
官方地址: &lt;a href=&quot;https://www.parity.io/&quot;&gt;Parity&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;trust&quot;&gt;Trust&lt;/h3&gt;

&lt;p&gt;在国外 App Store已经上架, 目前有 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;移动端的应用, 应用中有 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web3浏览器&lt;/code&gt;并支持很多 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;使用。&lt;br /&gt;
官方地址: &lt;a href=&quot;https://trustwalletapp.com/&quot;&gt;TrustWalletApp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;imtoken&quot;&gt;imToken&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;imToken&lt;/code&gt;是一个中国团队开发的, 目前只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;移动端的应用。&lt;br /&gt;
官方地址: &lt;a href=&quot;https://token.im/&quot;&gt;ImToken&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;myetherwallet&quot;&gt;MyEtherWallet&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MyEtherWallet&lt;/code&gt; 作为一个轻钱包，无需下载，直接在 Web端进行操作。&lt;br /&gt;
官方地址: &lt;a href=&quot;https://www.myetherwallet.com/&quot;&gt;MyEtherWallet&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;metamask&quot;&gt;MetaMask&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MetaMask&lt;/code&gt;是一个轻量级钱包, 以Chrome扩展程序存在的 Web端钱包。&lt;br /&gt;
官方地址: &lt;a href=&quot;https://metamask.io/&quot;&gt;MetaMask&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;trust-wallet&quot;&gt;Trust Wallet&lt;/h2&gt;

&lt;p&gt;了解过各种钱包平台后, 进入今天主要对应用 &lt;a href=&quot;https://github.com/TrustWallet/trust-wallet-ios&quot;&gt;trust-wallet-ios&lt;/a&gt;进行源码解析, 它在 github上已经是开源的了。并且在众多开源的虚拟货币钱包项目中，&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;已经十分完善和稳定了，已经在国外的 App Store上架了，对应的 Android版本也已开源(但貌似 Android版本并不是最新版本的)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;可与任何&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC20&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ERC223&lt;/code&gt;代币配合使用，并支持以太坊生态系统中的以太坊主链、侧链，以及所有服从以太坊协议的加密货币。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;为用户提供统一的钱包地址，可用于管理以太坊和所有代币。还有一个功能齐全的&lt;code class=&quot;highlighter-rouge&quot;&gt;Web3&lt;/code&gt;浏览器，可与任何分布式的应用程式(&lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;)配合使用。在它的官网有这样的介绍:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;无服务器环境完全本地化了每个已安装的应用程序&lt;/li&gt;
  &lt;li&gt;以客户端为基础架构,可确保密钥本地存储在您的设备上&lt;/li&gt;
  &lt;li&gt;银行级安全保护您的数字资产免受潜在威胁。&lt;/li&gt;
  &lt;li&gt;应用级认证系统可以防止未经授权的设备进行访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;主要模块&quot;&gt;主要模块&lt;/h3&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031154630925.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第一个模块是一个浏览器, 具体来说是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web3浏览器&lt;/code&gt;, 它支持许多 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApp&lt;/code&gt;(Decentralized Application的缩写, 即分布式应用), 支持基于以太坊的货币交易和游戏的 &lt;code class=&quot;highlighter-rouge&quot;&gt;DApps&lt;/code&gt;。当然也具备普通浏览器的功能, 访问其它网址, 添加书签, 查看历史记录等等。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031154744766.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第二个模块是钱包模块, 是这个 App最核心的部分, 对&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;的交易记录、余额、汇率变化的查看, 也可以进行交易转账(发送和接收)。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031154823974.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第三个模块是设置模块, 包括钱包账户的切换, 安全管理, 当前货币种类, 浏览器设置, 社区分享, 开发者选项等等。&lt;/p&gt;

&lt;h3 id=&quot;项目架构&quot;&gt;项目架构&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的 iOS项目在架构设计和代码风格、包括技术栈都是很不错的。我将会以架构模式和四层式架构来解析此项目。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031171755801.png&quot; width=&quot;30%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;目录结构。&lt;/strong&gt; 如上图所示, 主要模块和重要功能组成第一层的节点目录, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Tokens&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Style&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Extension&lt;/code&gt;等等。又在各个模块中将第二层目录按照功能分为&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinators&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Views&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModels&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewControllers&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Layouts&lt;/code&gt;等等。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;架构模式。&lt;/strong&gt; 采用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;的架构模式, 不过并没有使用动态绑定, 但这并不影响它项目结构清晰的逻辑。相对于&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;的架构模式来说, 就使得&lt;code class=&quot;highlighter-rouge&quot;&gt;Controller&lt;/code&gt;的负载变小了, 易于测试性提高了。当然它也具备&lt;code class=&quot;highlighter-rouge&quot;&gt;MVVM&lt;/code&gt;架构的优缺点, 这里就不赘述了。 我大概画了一个草图, 如下图:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102175322816.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;视图层。&lt;/strong&gt; 整个项目绝大部分使用纯代码进行&lt;code class=&quot;highlighter-rouge&quot;&gt;View层&lt;/code&gt;的编写, 且代码规范性较强, 也没有过多的继承, 所以代码可读性高。布局方式采用&lt;code class=&quot;highlighter-rouge&quot;&gt;autolayout&lt;/code&gt;方式, 在具体模块中还以&lt;code class=&quot;highlighter-rouge&quot;&gt;Layout&lt;/code&gt;为功能模块进行开发, 使&lt;code class=&quot;highlighter-rouge&quot;&gt;View层&lt;/code&gt;的代码更加清晰。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;业务层。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;的主要业务逻辑当然是有&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewModel&lt;/code&gt;来承担的, 另外还配合了&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;(或者说路由)的使用, 在页面之间的跳转逻辑上实现了统一管理。这样就减少了横向依赖, 也让跨层访问的业务更加容易开展。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;网络层。&lt;/strong&gt; 项目中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;进行数据请求, &lt;code class=&quot;highlighter-rouge&quot;&gt;Moya&lt;/code&gt;已经做了足够多的工作了, 包括交付给给业务层封装成对象的数据、网络层的各种优化工作等。也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;JSONRPCKit&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;APIKit&lt;/code&gt;的框架去进行数据请求, 这在&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;接下来的文章&lt;/a&gt;中会具体分析, 这些请求就是关于智能合约调用的。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;客户端在区块链中相当于一个轻量节点, 从公链上请求数据的话, 需要依靠某个全节点。就如图中的URL, 就可以理解为&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;客户端取链上数据所借助的全节点。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181031183501958.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;数据层。&lt;/strong&gt; 主要的数据持有化方式使用Realm数据库, 这是个轻量级、高性能、高效率、可跨平台的移动数据库。核心数据如钱包账户、交易、&lt;code class=&quot;highlighter-rouge&quot;&gt;Token&lt;/code&gt;等都存储于此。另外, 也使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;来保存比较重要且轻量的数据, 如私钥、应用锁设置和密码、最近使用的钱包、&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;cookies&lt;/code&gt;。还有一些数据, 如当前货币种类、启动次数、当前版本启动次数、是否分享、是否评分等等, 都是采用&lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefaults&lt;/code&gt;的形式进行数据保存的。&lt;/p&gt;

&lt;h3 id=&quot;项目流程&quot;&gt;项目流程&lt;/h3&gt;

&lt;p&gt;从程序启动&lt;code class=&quot;highlighter-rouge&quot;&gt;APPDelegate&lt;/code&gt;开始, &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;作为app间的路由, 判断当前app内是否有钱包账户, 若没有则进入以&lt;code class=&quot;highlighter-rouge&quot;&gt;WelcomeViewController&lt;/code&gt;为根控制器的页面进行钱包账户创建; 若有最近使用过的钱包账户, 则进入app内部的路由&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;。在这里, 钱包账号创建的页面和钱包使用页面已经划分为两条业务线。其实从业务角度来说, 可以也可以理解为这是&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;内部的两个应用。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102171823364.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;进入&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;后, 才真正开始创建&lt;code class=&quot;highlighter-rouge&quot;&gt;TabBarController&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationController&lt;/code&gt;以及各个业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;。上图中明确表示了这个过程, 也对主要的业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和其对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;进行了说明, 且同颜色的之间是一一对应的。&lt;/p&gt;

&lt;h3 id=&quot;主体框架的功能划分&quot;&gt;主体框架的功能划分&lt;/h3&gt;

&lt;p&gt;本文前面介绍过项目的目录结构了, 但这里所说的框架并不是按照目录结构的角度, 而是延续上面的项目流程的角度。首先, 我将按源码进行原模原样的表述, 然后我将提出对于其功能划分的一些自己的建议。因为我认为某写业务模块的功能是应该出现在另一个业务模块中的。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102171757143.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;appdelegate&quot;&gt;AppDelegate&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;需要承担的是程序的初始化以及整个应用生命周期的所影响的业务逻辑。
&lt;strong&gt;ProtectionCoordinator。&lt;/strong&gt; 功能是在保护应用的方面, 如应用锁、解锁以及当应用失去焦点后保护应用内部页面不被暴露的功能。
&lt;strong&gt;URLNavigatorCoordinator。&lt;/strong&gt; 功能是由 &lt;a href=&quot;https://github.com/devxoul/URLNavigator&quot;&gt;URLNavigator&lt;/a&gt;和 &lt;a href=&quot;https://github.com/BranchMetrics/ios-branch-deep-linking&quot;&gt;Branch&lt;/a&gt;的功能组成的。前者是对&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;进行监听的, 并在检测到约定好的URL了进行映射和处理。后者是关于延迟深度链接(Deferred Deep Linking)的。
&lt;strong&gt;Branch。&lt;/strong&gt; 和上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;是同一个, 在启动应用时进行初始化, 并将在应用程序生命周期中多次调用，当应用由后台向前台切换时也将调用。用于处理从外部跳转入后, 根据传入的参数要跳转进入指定的页面。
&lt;strong&gt;EtherKeystore。&lt;/strong&gt; 应用的核心业务的处理类, 有钱包管理(创建、删除、导入、导出)、助记词转化、签名工作、私钥管理等功能。它的具体业务将会在&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;下篇文章&lt;/a&gt;中具体介绍。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中, &lt;code class=&quot;highlighter-rouge&quot;&gt;ProtectionCoordinator&lt;/code&gt;需要跟随应用的生命周期进行功能的调整。&lt;code class=&quot;highlighter-rouge&quot;&gt;URLNavigatorCoordinator&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;navigator&lt;/code&gt;用来处理响应&lt;a href=&quot;https://developer.apple.com/library/archive/featuredarticles/iPhoneURLScheme_Reference/Introduction/Introduction.html&quot;&gt;URL Scheme&lt;/a&gt;这种由其它 App的跳入, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;用来处理响应&lt;a href=&quot;https://developer.apple.com/ios/universal-links/&quot;&gt;Universal Links&lt;/a&gt;这种通用链接的跳入形式。
而&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;在这里只是作为一个&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;初始化的一个参数, 并无实际使用。这也是我个人认为在这个业务模块并不应出现的类, 当然后面我也会细聊我为什么这么说? 我也将会给出我自己的建议。&lt;/p&gt;

&lt;h4 id=&quot;appcoordinator&quot;&gt;AppCoordinator&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;(或者说路由)在业务上一般可以分为 App间的路由和 App内的路由。而在此项目中, 因为还有&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;, 所以当前的&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;是一个 App间的路由, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;是一个App内的路由。所以在项目中&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;承担了一些应用层的功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Initializers。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;CrashReportInitializer&lt;/code&gt;是统计崩溃的, 用到&lt;a href=&quot;https://get.fabric.io/&quot;&gt;Fabric&lt;/a&gt;的一些工具, 如 Crashlytics、Answers等。而&lt;code class=&quot;highlighter-rouge&quot;&gt;SkipBackupFilesInitializer&lt;/code&gt;是防止文件被备份的。
&lt;strong&gt;AppTracker。&lt;/strong&gt; 记录应用启动次数、当前版本启动次数、是否分享、是否评分等一些仅保存于本地的应用层统计数据。
&lt;strong&gt;AppGlobalStyle。&lt;/strong&gt; 应用统一的风格, 包括导航栏外观、UITexfield外观、TableView分割线风格(边距, 颜色)等。这个统一风格是整个应用一致的, 一定要区别于统一管理的字体和颜色的类(如项目中的Colors类和AppStyle类)。
&lt;strong&gt;PushNotificationsRegistrar。&lt;/strong&gt; 管理远程推送授权和注册相关的业务。
&lt;strong&gt;BranchEventClosure。&lt;/strong&gt; 在从外部跳入当前 App后, 由&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;的操作调起的, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;BranchEventClosure&lt;/code&gt;的 block中, 由下层的&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来控制将要跳入的目标页面。但我个人认为, 它并不应该出现在这里, 后面建议中会具体说明原因。&lt;/p&gt;

&lt;h4 id=&quot;incoodinator&quot;&gt;InCoodinator&lt;/h4&gt;

&lt;p&gt;这是 App内的路由, 与具体业务模块有间接联系的路由, 负责创建和管理各个业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;和各个业务模块之间的跳转逻辑。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CheckDeviceCoordinator。&lt;/strong&gt; 检测当前设备是否是越狱设备, 如果是越狱设备则会提醒用户不安全, 因为这样在 &lt;code class=&quot;highlighter-rouge&quot;&gt;keychain&lt;/code&gt;中存储的钱包账户的私钥就可能被盗。毕竟在区块链中, 私钥是你作为钱包主人的唯一证明。
&lt;strong&gt;HelpsCoordinator。&lt;/strong&gt; 通过本地对启动次数的监听, 在指定的启动次数时对用户进行应用分享和评分的提醒。
&lt;strong&gt;URLNavigable、URLNavigator。&lt;/strong&gt; 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Browser&lt;/code&gt;中进行监听, 一旦检测到有约定好的URL后, 可以在对应的block中做出想要的映射或者处理。如下图。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/2018110216360916.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;strong&gt;MigrationInitializer、Realm、WalletSession。&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Realm&lt;/code&gt;数据库和数据库迁移的处理。这里其实不是特指数据库, 而是指所有与具体业务模块的&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;创建时所使用的公共类。所以这里包括&lt;code class=&quot;highlighter-rouge&quot;&gt;WalletSession&lt;/code&gt;等类。
&lt;strong&gt;Coordinators。&lt;/strong&gt; 指&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;所管理的具体业务模块的 Coordinator, 包括&lt;code class=&quot;highlighter-rouge&quot;&gt;BrowserCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TokensCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;settingsCoordinator&lt;/code&gt;。
&lt;strong&gt;TabBarController。&lt;/strong&gt; 创建上述&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinators&lt;/code&gt;中各个具体业务模块的 Coordinator所管理的&lt;code class=&quot;highlighter-rouge&quot;&gt;NavigationController&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ViewController&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;直抒己见&quot;&gt;直抒己见&lt;/h4&gt;

&lt;p&gt;在上面的文章中, 我也说过有一些地方, 我个人认为是可以做一些调整的。当然, 如果你没有我这样的强迫症, 可以略过。
先来看一个理念。在没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;的项目中, 其启动流程和各个&lt;code class=&quot;highlighter-rouge&quot;&gt;VC&lt;/code&gt;之间的创建应该是这样的(&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.4g9db2ybm&quot;&gt;原图出处&lt;/a&gt;):&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181101181606999.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;然而在使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;Coordinator&lt;/code&gt;的项目中, 应该是这样的(&lt;a href=&quot;https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.4g9db2ybm&quot;&gt;原图出处&lt;/a&gt;):&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181101182031878.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;当然, 在这个项目中, 项目的架构模式并不完全是第二张图这样。&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;将第二张图中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;细分为了两个, 即应用间和应用内的路由。而在&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;项目中, 图二中的显然只是相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;, 而从外部跳转(包括从其它 App跳转也包括从通用链接跳转)进入当前 App的管理是&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;来处理的。这个理念懂了, 我们进入主题。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一, 将 App外部跳转的事务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;。&lt;/strong&gt; 如果按照上面所说的理念, 那么在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中, 其实应该把所有与外部跳转的事务交由&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;来做。也就是可以考虑将&lt;code class=&quot;highlighter-rouge&quot;&gt;URLNavigatorCoordinator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Branch&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;EtherKeystore&lt;/code&gt;这些放到&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;中只留下与应用的初始化以及整个应用生命周期的所影响的业务逻辑。
&lt;strong&gt;第二, 将于具体的业务模块切换的事务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;。&lt;/strong&gt;  在&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;BranchEventClosure&lt;/code&gt;, 是用来通过&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来控制目标页面的跳转的。这些与具体业务模块的跳转逻辑有关的业务就应该交于内部路由&lt;code class=&quot;highlighter-rouge&quot;&gt;InCoordinator&lt;/code&gt;来做。&lt;code class=&quot;highlighter-rouge&quot;&gt;AppCoordinator&lt;/code&gt;中只留下与外部跳转和应用层有关的业务。
如果这样多了的话, 功能划分就有变化了, 如下图, 绿色边框的是新增的功能:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/trustwallet-1/20181102171638114.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;到此为止 Trust Wallet项目以 iOS的角度, 按照架构和主要功能对其源码解析完了。然后, 真正关于区块链的核心功能, 如智能合约调用、私钥公钥管理等, 会以&lt;code class=&quot;highlighter-rouge&quot;&gt;Trust&lt;/code&gt;钱包为例让你逐步理解。具体请阅读下一篇&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85-Trust%E9%A1%B9%E7%9B%AE%E8%A7%A3%E8%AF%BB%E4%B9%8B%E6%9E%B6%E6%9E%84%E5%92%8C%E6%B5%81%E7%A8%8B&quot;&gt;以太坊钱包 Trust项目解读之架构和流程&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/%E7%94%B1Trust-Wallet%E7%90%86%E8%A7%A3%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85%E7%AE%A1%E7%90%86%E5%92%8C%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6&quot;&gt;由Trust Wallet理解以太坊钱包管理和智能合约&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Nov 2018 02:44:45 +0800</pubDate>
        <link>http://localhost:4000/2018/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85-Trust%E9%A1%B9%E7%9B%AE%E8%A7%A3%E8%AF%BB%E4%B9%8B%E6%9E%B6%E6%9E%84%E5%92%8C%E6%B5%81%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85-Trust%E9%A1%B9%E7%9B%AE%E8%A7%A3%E8%AF%BB%E4%B9%8B%E6%9E%B6%E6%9E%84%E5%92%8C%E6%B5%81%E7%A8%8B/</guid>
        
        <category>区块链</category>
        
        
        <category>区块链</category>
        
      </item>
    
      <item>
        <title>WatchOS开发教程之六: 表盘功能开发</title>
        <description>&lt;p&gt;WatchOS表盘开发流程, 工作原理, 表盘类型和表盘模板类型总结。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#表盘开发简介complications&quot;&gt;表盘开发简介(Complications)&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#表盘开发的好处&quot;&gt;表盘开发的好处&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#表盘和模板的类型&quot;&gt;表盘和模板的类型&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#表盘系列complication-family&quot;&gt;表盘系列(Complication Family)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#表盘模板complicationtemplate&quot;&gt;表盘模板(ComplicationTemplate)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#时间轴timeline&quot;&gt;时间轴(TimeLine)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#表盘开发流程&quot;&gt;表盘开发流程&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#配置-watchkit-extension&quot;&gt;配置 WatchKit Extension&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#设计表盘元素complications&quot;&gt;设计表盘元素(Complications)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#表盘数据源配置complicationdatasource&quot;&gt;表盘数据源配置(ComplicationDataSource)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#更新表盘数据&quot;&gt;更新表盘数据&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;表盘开发简介complications&quot;&gt;表盘开发简介(Complications)&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;是 WatchOS 2.0引入的，它是表盘上展示的小元素，可以快速访问常用数据。当你的应用支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;功能开发后, 便可以在表盘展示你应用的指定的数据，且支持直接从表盘唤醒你的 App。系统提供了一些内置的&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;, 比如天气、日历、活动以及更多类型的数据提供内置复杂功能。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里所指的表盘开发, 是对表盘元素(Complications)的开发, 而不是对整个表盘(Complication)的开发, 因为整个表盘的所属权是 WatchOS。&lt;/strong&gt;当然, &lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;的大小和位置也是由 WatchOS决定，并基于所选表盘类型的可用空间。因为不同类型的表盘, &lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;的模板类型、可用空间、大小也不尽相同。比如, 下图是某种表盘，包含的&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;有五个位置, 两种不同的模板类型。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-6/20180831101702514.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;表盘开发的好处&quot;&gt;表盘开发的好处&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;功能不是必须的，但苹果官方强烈推荐 App支持此功能, 即使只是作为 App的启动器也好。好处如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.当用户查看手表时, 它为你的 App提供了一个展示重要信息的机会。&lt;/li&gt;
  &lt;li&gt;2.它会将 App暂停在内存中。这样，当用户点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;时，系统可以快速唤醒你的 App。&lt;/li&gt;
  &lt;li&gt;3.它为你的 App的后台任务提供了更大的预算。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;表盘和模板的类型&quot;&gt;表盘和模板的类型&lt;/h2&gt;

&lt;p&gt;要实现&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;功能，需要将&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;框架导入到 WatchKit Extension中。&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;框架定义了用于实现&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;功能的类, 以及用于提供 Apple Watch所需数据的类。比如&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;CLKComplication&lt;/code&gt;类, 它的实例就是一个表盘。&lt;/p&gt;

&lt;h3 id=&quot;表盘系列complication-family&quot;&gt;表盘系列(Complication Family)&lt;/h3&gt;

&lt;p&gt;表盘的实例只有一个属性就是&lt;code class=&quot;highlighter-rouge&quot;&gt;family&lt;/code&gt;, 它代表了当前表盘的表盘系列(Complication Family), 或者理解为表盘的类型。Apple Watch支持多种&lt;code class=&quot;highlighter-rouge&quot;&gt;Complication Family&lt;/code&gt;，也定义了表盘的大小和特征。下图展示了&lt;code class=&quot;highlighter-rouge&quot;&gt;Complication Family&lt;/code&gt;以及它们在特定表盘上的显示方式。苹果官方也是鼓励 App支持所有可用&lt;code class=&quot;highlighter-rouge&quot;&gt;Complication Family&lt;/code&gt;。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-6/20180831112808766.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;再具体些, 源码中&lt;code class=&quot;highlighter-rouge&quot;&gt;Complication Family&lt;/code&gt;一共有&lt;code class=&quot;highlighter-rouge&quot;&gt;7种&lt;/code&gt;系列。具体如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplicationFamily&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modularSmall&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modularLarge&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@available(watchOS 3.0, *)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilitarianSmallFlat&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* subset of UtilitarianSmall */&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utilitarianLarge&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;circularSmall&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@available(watchOS 3.0, *)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extraLarge&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;表盘模板complicationtemplate&quot;&gt;表盘模板(ComplicationTemplate)&lt;/h3&gt;

&lt;p&gt;在给定某个表盘系列(Complication Family)中，都有多种不同的表盘模板(ComplicationTemplate)，你可以决定使用哪种模板来显示的数据。这些模板可以在可用空间中显示文本、图像或两者的组合, 只需要你提供数据就可以展示了。&lt;/p&gt;

&lt;p&gt;到目前 WatchOS 4.3, 共有&lt;code class=&quot;highlighter-rouge&quot;&gt;28种&lt;/code&gt;表盘模板, WatchOS 5.0又加入了&lt;code class=&quot;highlighter-rouge&quot;&gt;15种&lt;/code&gt;表盘模板，我做了一个表盘模板汇总。下面按照表盘系列对所有模板进行了一一例举, 你可以很清楚的看到各个模板的展示方式。&lt;/p&gt;

&lt;h4 id=&quot;clkcomplicationfamilymodularsmall&quot;&gt;CLKComplicationFamilyModularSmall&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateModularSmallSimpleText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831145118539?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateModularSmallSimpleImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/2018083114541635?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateModularSmallRingText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831150002497?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;④ CLKComplicationTemplateModularSmallRingImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831150010279?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑤ CLKComplicationTemplateModularSmallStackText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831150019181?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑥ CLKComplicationTemplateModularSmallStackImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831150028171?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑦ CLKComplicationTemplateModularSmallColumnsText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/2018083115003699?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilymodularlarge&quot;&gt;CLKComplicationFamilyModularLarge&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateModularLargeStandardBody&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151122732?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateModularLargeTallBody&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151131150?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateModularLargeTable&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151141406?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;④ CLKComplicationTemplateModularLargeColumns&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151148639?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilyutilitariansmall&quot;&gt;CLKComplicationFamilyUtilitarianSmall&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateUtilitarianSmallSquare&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151447299?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateUtilitarianSmallRingText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151455696?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateUtilitarianSmallRingImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831151506150?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilyutilitariansmallflat&quot;&gt;CLKComplicationFamilyUtilitarianSmallFlat&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateUtilitarianSmallFlat&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153123607?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilyutilitarianlarge&quot;&gt;CLKComplicationFamilyUtilitarianLarge&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateUtilitarianLargeFlat&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153134508?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilycircularsmall&quot;&gt;CLKComplicationFamilyCircularSmall&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateCircularSmallSimpleText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153536618?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateCircularSmallSimpleImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153544770?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateCircularSmallRingText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153552812?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;④ CLKComplicationTemplateCircularSmallRingImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153600634?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑤ CLKComplicationTemplateCircularSmallStackText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831153609309?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilyextralargewatchos-30&quot;&gt;CLKComplicationFamilyExtraLarge（watchOS 3.0）&lt;/h4&gt;

&lt;p&gt;① CLKComplicationTemplateExtraLargeSimpleText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154118897?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateExtraLargeSimpleImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154132231?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateExtraLargeRingText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154142991?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;④ CLKComplicationTemplateExtraLargeRingImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154201112?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑤ CLKComplicationTemplateExtraLargeStackText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154211622?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑥ CLKComplicationTemplateExtraLargeStackImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154225832?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑦ CLKComplicationTemplateExtraLargeColumnsText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdn.net/20180831154243918?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilygraphiccornerwatchos-50&quot;&gt;CLKComplicationFamilyGraphicCorner（watchOS 5.0）&lt;/h4&gt;
&lt;p&gt;① CLKComplicationTemplateGraphicCornerGaugeText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129165400866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateGraphicCornerGaugeImage&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129170123948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;③ CLKComplicationTemplateGraphicCornerTextImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129170221711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;④ CLKComplicationTemplateGraphicCornerStackText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129170755394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑤ CLKComplicationTemplateGraphicCornerCircularImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129170803388.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilygraphicbezelwatchos-50&quot;&gt;CLKComplicationFamilyGraphicBezel（watchOS 5.0）&lt;/h4&gt;
&lt;p&gt;① CLKComplicationTemplateGraphicBezelCircularText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129170902925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilygraphiccircularwatchos-50&quot;&gt;CLKComplicationFamilyGraphicCircular（watchOS 5.0）&lt;/h4&gt;
&lt;p&gt;① CLKComplicationTemplateGraphicCircularImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171111394.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateGraphicCircularOpenGaugeRangeText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171240528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateGraphicCircularOpenGaugeSimpleText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171309651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;④ CLKComplicationTemplateGraphicCircularOpenGaugeImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/2019012917135064.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑤ CLKComplicationTemplateGraphicCircularClosedGaugeText&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171426312.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;⑥ CLKComplicationTemplateGraphicCircularClosedGaugeImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171450124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;clkcomplicationfamilygraphicrectangularwatchos-50&quot;&gt;CLKComplicationFamilyGraphicRectangular（watchOS 5.0）&lt;/h4&gt;
&lt;p&gt;① CLKComplicationTemplateGraphicRectangularLargeImage&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171826271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;② CLKComplicationTemplateGraphicRectangularStandardBody&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171836456.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;③ CLKComplicationTemplateGraphicRectangularTextGauge&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://img-blog.csdnimg.cn/20190129171903833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dhbmd5YW5jaGFuZzIx,size_16,color_FFFFFF,t_70&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;时间轴timeline&quot;&gt;时间轴(TimeLine)&lt;/h2&gt;

&lt;p&gt;表盘数据源对象, 它是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CLKComplicationDataSource&lt;/code&gt;协议的遵循者, 实现了协议中的一些方法。此协议中的方法将与&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;产生交互, 可以返回的过去、现在和将来的条目(TimeLineEntry)用于构建表盘元素(Complications)数据的&lt;strong&gt;时间轴&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;每个时间轴条目(TimeLineEntry)都包含一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;对象和一个包含要显示的数据的表盘模板。当指定的日期和精确时间到达时，&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;会将相应模板中的数据渲染到&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;中。随着时间的推移，&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;会根据时间轴中的条目更新你的&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;构建数据时间轴的另一个好处是，它允许用户在时间旅行(TimeTravel)期间查看更多数据。如果启用了&lt;code class=&quot;highlighter-rouge&quot;&gt;TimeTravel&lt;/code&gt;，用户可以使用Digital Crown查看或预览向&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;提供的任何数据。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-6/20180831170915426.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;工作原理&quot;&gt;工作原理&lt;/h2&gt;

&lt;p&gt;由于与表盘的交互很快发生并持续很短的时间，因此&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;必须提前发现表盘元素(Complications)，以确保它们能够及时显示。为了最大限度地降低功耗，&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;会要求你提供尽可能多的数据，然后缓存数据并在需要时呈现数据。&lt;/p&gt;

&lt;p&gt;当&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;需要来自表盘元素(Complications)的数据时，它会运行你的 WatchKit Extension并调用表盘数据源对象的方法以获得它所需的内容。表盘数据源对象遵循&lt;code class=&quot;highlighter-rouge&quot;&gt;CLKComplicationDataSource&lt;/code&gt;协议，是你提供的对象, 系统默认是工程中的&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplicationController&lt;/code&gt;对象。可以使用此协议中的方法将数据返回到&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;，并提供要显示的过去、现在、将来的数据。表盘将展示这些提供的表盘数据。&lt;/p&gt;

&lt;p&gt;在更新表盘数据的时候, 有问题需要注意。如果表盘数据没有更新，请不要调用表盘数据更新的方法, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;reloadTimelineForComplication:&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;extendTimelineForComplication:&lt;/code&gt;方法。请注意，后台任务和表盘数据传输都是预算编制的。如果超出预算，则在恢复预算之前无法更新表盘数据。&lt;/p&gt;

&lt;h2 id=&quot;表盘开发流程&quot;&gt;表盘开发流程&lt;/h2&gt;

&lt;p&gt;要支持 App的表盘开发功能，请执行以下操作：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.配置 WatchKit Extension以告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;支持表盘功能。&lt;/li&gt;
  &lt;li&gt;2.确定需要在表盘中展示的数据内容。&lt;/li&gt;
  &lt;li&gt;3.选择你的 App在每个系列中支持的模板。&lt;/li&gt;
  &lt;li&gt;4.实现表盘数据源对象(遵循CLKComplicationDataSource协议), 以此向&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;提供数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;配置-watchkit-extension&quot;&gt;配置 WatchKit Extension&lt;/h3&gt;

&lt;p&gt;在创建新的 Watch App时，可以要求项目支持表盘功能开发。Xcode就会自动创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;所需的资源。Xcode提供了一个数据源类&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplicationController&lt;/code&gt;，并配置该项目以使用该类。如果在创建Watch App时未启用表盘功能，也可以稍后启用该功能。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-6/20180831171803946.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;设计表盘元素complications&quot;&gt;设计表盘元素(Complications)&lt;/h3&gt;

&lt;p&gt;在创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;之前，需要先确定&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;打算展示的内容。在确定打算展示的内容时，请考虑以下因素：&lt;br /&gt;
1.数据能够放入可用的表盘模板中吗？数据空间有限, 可能只有少量文本字符或小图像的空间。您可以使用可用空间将信息传达给用户吗？&lt;br /&gt;
2.否已使用通知向用户及时传达信息？如果使用通知向用户提供更新，则&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;可能并不比通知的方式更加显眼。&lt;br /&gt;
3.你可以提前提供多少数据？如果您的应用程序的数据经常更改，则可能难为&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;提供足够的数据。更糟糕的是，如果过于频繁地刷新&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;数据，则可能会超出后台执行或传输的预算。&lt;br /&gt;
4.表盘在活跃状态下, 具有&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;功能的 App可以为后台任务提供更大的预算，但每小时的后台执行时间仍然有限。或者，可以在用户的 ​​iPhone上生成&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;数据并将其传输到 Watch App，但每天只能进行&lt;code class=&quot;highlighter-rouge&quot;&gt;50次&lt;/code&gt;表盘传输。具体可以参考另外一篇文章: &lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/81017017#t10&quot;&gt;表盘数据传输&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;如果上述这些内容你都考虑好了, 那么你就可以制定表盘数据和选择表盘模板了。苹果官方依然还是很建议支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;功能的, 具体原因文章开头表明过, 故不再赘述。&lt;/p&gt;

&lt;h3 id=&quot;表盘数据源配置complicationdatasource&quot;&gt;表盘数据源配置(ComplicationDataSource)&lt;/h3&gt;

&lt;p&gt;先来看看关于&lt;code class=&quot;highlighter-rouge&quot;&gt;ComplicationDataSource&lt;/code&gt;协议的一些方法:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSupportedTimeTravelDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLKComplicationTimeTravelDirections&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的方法, 定义了 TimeTravel 的方向, 过去还是未来, 或者两者都是。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTimelineStartDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTimelineEndDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的第一个方法, 定义提供时间轴条目(TimeLineEntry)的开始时间, 如果不支持过去可以设置为当前时间。若未实现此方法，则ClockKit不会在当前条目之前检索时间轴条目。&lt;/p&gt;

&lt;p&gt;上面的第二个方法, 定义提供时间轴条目(TimeLineEntry)的结束时间, 如果不支持过去可以设置为当前时间。若未实现此方法，则ClockKit不会在当前条目之后检索时间轴条目。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCurrentTimelineEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLKComplicationTimelineEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的方法, 定义当前想要展示在表盘元素上的时间轴条目数据。若支持过去的时间轴条目，则从此方法返回的条目必须在getTimelineEntries（for：before：limit：withHandler :)方法提供的所有条目之后。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTimelineEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLKComplicationTimelineEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getTimelineEntries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLKComplicationTimelineEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的第一个方法, 定义过去的时间轴条目。返回的条目必须从过去开始，且结束日期不能迟于给定参数date。 条目间必须相隔超过一分钟, 如果两个条目相隔不到一分钟，则ClockKit会丢弃其中一个条目。&lt;/p&gt;

&lt;p&gt;上面的第二个方法, 定义未来的时间轴条目。返回的条目必须在给定参数date之后开始。条目间必须相隔超过一分钟, 如果两个条目相隔不到一分钟，则ClockKit会丢弃其中一个条目。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getLocalizableSampleTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;complication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CLKComplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withHandler&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CLKComplicationTemplate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面的方法, 获取本地化的表盘模板，该模板充当PlaceHolder的作用。当应用安装完成后, 系统会根据支持的表盘系列(ComplicationFamily)调用此方法一次，并缓存结果。&lt;/p&gt;

&lt;h3 id=&quot;更新表盘数据&quot;&gt;更新表盘数据&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ClockKit&lt;/code&gt;提供了几种在运行时更新并发症数据的方法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.WatchKit Extension运行时显式更新表盘数据。&lt;/li&gt;
  &lt;li&gt;2.安排后台应用程序刷新任务以更新表盘数据。&lt;/li&gt;
  &lt;li&gt;3.从 iOS App进行表盘数据传输来更新。&lt;/li&gt;
  &lt;li&gt;4.使用推送通知更新表盘数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;每当应用为&lt;code class=&quot;highlighter-rouge&quot;&gt;Complications&lt;/code&gt;提供新数据时，请调用&lt;code class=&quot;highlighter-rouge&quot;&gt;CLKComplicationServer&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;reloadTimelineForComplication:&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;extendTimelineForComplication:&lt;/code&gt;方法来更新时间轴。前者方法删除并替换整个时间轴，而后者方法将数据添加到现有时间轴的末尾。&lt;/p&gt;

&lt;p&gt;如果数据在可预测的时间发生变化，请考虑安排后台应用刷新任务以更新表盘数据。触发后台任务时，收集新数据（例如，使用NSURLSession后台传输）。只要您拥有更新的数据，请调用数据源reload或extend方法来更新时间轴，并安排下一个后台应用程序刷新任务。&lt;/p&gt;

&lt;p&gt;或者，您可以在 iOS App中执行更复杂或消耗过高的数据收集任务，然后将该数据传输到手表。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchConnectivity&lt;/code&gt;框架通过&lt;code class=&quot;highlighter-rouge&quot;&gt;transferCurrentComplicationUserInfo:&lt;/code&gt;方法将更新发送到手表。手表收到数据，就会调用会话代理的&lt;code class=&quot;highlighter-rouge&quot;&gt;session:didReceiveUserInfo:&lt;/code&gt;方法。在此方法中，使用提供的用户信息字典更新表盘数据，然后调用数据源reload或extend方法来更新时间轴。&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;WatchOS开发教程之一: Watch App架构及生命周期&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;WatchOS开发教程之二: 布局适配和系统Icon设计尺寸&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89&quot;&gt;WatchOS开发教程之三: 导航方式和控件详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B&quot;&gt;WatchOS开发教程之四: Watch与 iPhone的通信和数据共享&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94&quot;&gt;WatchOS开发教程之五: 通知功能开发&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD&quot;&gt;WatchOS开发教程之六: 表盘功能开发&lt;/a&gt;  &lt;a href=&quot;https://github.com/wangyanchang21/Watch-App-Sampler&quot;&gt;WatchOS 开发教程源码：Watch-App-Sampler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/ComplicationEssentials.html#//apple_ref/doc/uid/TP40014969-CH27-SW1&quot;&gt;Complication Essentials&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/watchos/app-architecture/complications/&quot;&gt;Complications Guidelines&lt;/a&gt;
&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/watchos/icons-and-images/complication-images/&quot;&gt;Complication Images Guidelines&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 04 Sep 2018 02:32:49 +0800</pubDate>
        <link>http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD/</guid>
        
        <category>watchOS</category>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>WatchOS开发教程之五: 通知功能开发</title>
        <description>&lt;p&gt;WatchOS通知静态和动态页面的开发、通知推送的分发规则、通知的授权和配置等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#watchos-通知简介&quot;&gt;WatchOS 通知简介&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#短视界面short-look&quot;&gt;短视界面(Short-Look)&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#长视界面long-look&quot;&gt;长视界面(Long-Look)&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#watchos-通知页面开发&quot;&gt;WatchOS 通知页面开发&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#静态界面和动态界面&quot;&gt;静态界面和动态界面&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#自定义静态通知页面&quot;&gt;自定义静态通知页面&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#自定义动态通知页面&quot;&gt;自定义动态通知页面&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#通知分发规则&quot;&gt;通知分发规则&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#分发规细则&quot;&gt;分发规细则&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#如何判断活跃设备&quot;&gt;如何判断活跃设备&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#watchos-通知授权和配置&quot;&gt;WatchOS 通知授权和配置&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#通知授权&quot;&gt;通知授权&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#配置模拟通知&quot;&gt;配置模拟通知&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#配置真实通知&quot;&gt;配置真实通知&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;watchos-通知简介&quot;&gt;WatchOS 通知简介&lt;/h2&gt;

&lt;p&gt;在之前的文章&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;Notification Icon、Notification Center Icon&lt;/a&gt;中, 曾经简单的介绍过 WatchOS的通知究竟是何形态。今天将会以更加全面的角度和更加详尽的知识点来进行 WatchOS的通知开发。&lt;/p&gt;

&lt;p&gt;从 WatchOS 2.0开始, 就支持接收和处理通知了。它最大的方便就是, 用户可以在 Watch上接收和处理从 iPhone转发过来的某些本地和远程的通知。到后来从 WatchOS 3.0(对应 iOS 10.0)开始, 通知就已经摒弃之前的通知机制, 从而开始使用&lt;code class=&quot;highlighter-rouge&quot;&gt;UserNotifications&lt;/code&gt;框架了。&lt;/p&gt;

&lt;h3 id=&quot;短视界面short-look&quot;&gt;短视界面(Short-Look)&lt;/h3&gt;

&lt;p&gt;首先了解一下，Apple Watch上的通知分为两种：&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;long-lock&lt;/code&gt;。当Apple Watch首次收到通知时, 系统会显示短视界面, 如下图所示。&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;可以理解为一个简单的通知预览, 且&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;的通知界面我们不能自定义。故&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;界面是一个无法定制的非滚动屏幕, 系统使用展示 App名称、图标以及通知标题的模板。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/2018082916285899.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;如果用户继续查看通知，则系统会从&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;界面快速转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;long-lock&lt;/code&gt;界面。&lt;/p&gt;

&lt;h3 id=&quot;长视界面long-look&quot;&gt;长视界面(Long-Look)&lt;/h3&gt;

&lt;p&gt;长视界面是一个可滚动的屏幕，显示通知的内容和任何相关的操作按钮。如果没有提供自定义通知界面，Apple Watch会显示一个默认界面，其中包括应用程序图标、通知的标题和通知内容。如果提供了自定义通知界面，Apple Watch会显示自定义界面。&lt;/p&gt;

&lt;p&gt;长视通知界面分为三个区域：
&lt;code class=&quot;highlighter-rouge&quot;&gt;sash区域&lt;/code&gt;: 是覆盖式的，其中包含应用图标和应用名称。它的颜色是可以自定义的。
&lt;code class=&quot;highlighter-rouge&quot;&gt;content区域&lt;/code&gt;: 包含有关传入通知的详细信息, 这是主要的自定义区域。
&lt;code class=&quot;highlighter-rouge&quot;&gt;bottom区域&lt;/code&gt;: 包含关闭按钮以及在 iOS中注册的可操作按钮。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/20180829165033181.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;点击通知界面即可启动 Watch App。点击其中一个自定义的操作按钮可将选定的操作传递到 iOS App或 Watch App。具体点击后的传递逻辑, 请查考本文最后的响应可操作选项。&lt;/p&gt;

&lt;h2 id=&quot;watchos-通知页面开发&quot;&gt;WatchOS 通知页面开发&lt;/h2&gt;

&lt;p&gt;WatchOS 通知页面开发, 其实就是指对长视页面(Long-Look)通知界面的开发, 因为短视界面(Short-Look)是不可以自定义的。自定义长视(Long-Look)通知界面由两个独立的界面组成：一个是静态的(Static)，一个是动态的(Dynamic)。&lt;/p&gt;

&lt;h3 id=&quot;静态界面和动态界面&quot;&gt;静态界面和动态界面&lt;/h3&gt;

&lt;p&gt;首先, 静态界面(Static Interface)是必需的，是显示通知消息以及配置任何静态图像、文本的简单方法。动态界面(Dynamic Interface)是可选的，可提供一种在运行时自定义通知内容显示的方法。下图显示了&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;中未修改的静态和动态界面场景:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/20180829171520129.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;静态和动态的选择&quot;&gt;静态和动态的选择&lt;/h4&gt;

&lt;p&gt;WatchOS会除了下面几个情况会显示静态界面(Static Interface)，除此之外都会显示动态界面(Dynamic Interface):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.当动态界面不可用时&lt;/li&gt;
  &lt;li&gt;2.没有足够的电量来保证显示动态界面时&lt;/li&gt;
  &lt;li&gt;3.明确告诉 WatchOS不显示动态界面时&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当做出选择后，WatchOS会加载相应的&lt;code class=&quot;highlighter-rouge&quot;&gt;storyboard&lt;/code&gt;并准备界面。动态界面的加载过程与 Watch App的其它控制器的加载过程大致相同。唯一不同的就是处理通知有效负载除，该负载用于指定通知控制器。它的加载流程如下:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/20180829174920480.png&quot; width=&quot;90%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;自定义静态通知页面&quot;&gt;自定义静态通知页面&lt;/h3&gt;

&lt;p&gt;静态页面是必需的，使用静态通知界面定义自定义通知界面的简单版本。静态界面的目的是在 WatchKit Extension无法及时配置动态界面的情况下能提供稳定的界面。通知界面也会显示在通知中心中。&lt;/p&gt;

&lt;p&gt;创建静态界面的规则如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.所有图片都必须位于 Watch App的包中。&lt;/li&gt;
  &lt;li&gt;2.界面不得包含&lt;code class=&quot;highlighter-rouge&quot;&gt;control&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;或其它交互式控件。&lt;/li&gt;
  &lt;li&gt;3.界面的&lt;code class=&quot;highlighter-rouge&quot;&gt;notificationAlertLabel&lt;/code&gt;必须外连接到&lt;code class=&quot;highlighter-rouge&quot;&gt;Lable&lt;/code&gt;上。&lt;code class=&quot;highlighter-rouge&quot;&gt;Label&lt;/code&gt;的内容将会被设置为通知的消息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自定义动态通知页面&quot;&gt;自定义动态通知页面&lt;/h3&gt;

&lt;p&gt;当你将你的静态界面的&lt;code class=&quot;highlighter-rouge&quot;&gt;Has Dynamic Interface&lt;/code&gt;勾选时, 将会支持自定义动态界面。通过动态通知界面，可以为用户提供更丰富的通知体验。可以显示的不仅仅是通知消息, 还可以合并其他信息，显示动态生成的内容等。&lt;/p&gt;

&lt;p&gt;创建动态界面的规则如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.在大多数界面中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;separator&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;2.仅在界面中根据需要包括&lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;3.不要包括按钮、开关或其它交互式控件。&lt;/li&gt;
  &lt;li&gt;4.使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SpriteKit&lt;/code&gt;场景，&lt;code class=&quot;highlighter-rouge&quot;&gt;SceneKit&lt;/code&gt;场景或内嵌视频来生成视觉丰富的通知。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;运行时动态配置&quot;&gt;运行时动态配置&lt;/h4&gt;

&lt;p&gt;当相应类型的通知到达时，WatchOS会在&lt;code class=&quot;highlighter-rouge&quot;&gt;storybord&lt;/code&gt;中显示相应的场景，并要求 WatchKit Extension实例化相应的&lt;code class=&quot;highlighter-rouge&quot;&gt;WKUserNotificationInterfaceController&lt;/code&gt;类。初始化通知控制器后，WatchOS使用该&lt;code class=&quot;highlighter-rouge&quot;&gt;didReceiveNotification:withCompletion:&lt;/code&gt;方法将有效负载数据传递给它。可以使用有效负载数据配置通知界面的其余部分，然后调用提供处理完成的block，让 WatchOS知道该通知控制器已准备就绪。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/20180829182843750.png&quot; width=&quot;90%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;通知分发规则&quot;&gt;通知分发规则&lt;/h2&gt;

&lt;h3 id=&quot;分发规细则&quot;&gt;分发规细则&lt;/h3&gt;

&lt;p&gt;Apple Watch和 iPhone是协同完成向用户分发通知的工作的。然而, 并不会在两个设备上同时显示，而会将通知显示在当前最有可能获取用户焦点的某一个设备上。系统根据通知的类型，通知的推送源以及哪个设备处于活动状态来决定哪个设备接收通知。大致的规则可以总结如下:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;通知类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;通知推送源&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;通知接收者&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;本地(Local)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS App&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apple Watch 或 iPhone (取决于下方条件)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;本地(Local)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WatchKit Extension&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅限Apple Watch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;远程(Remote)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;后台服务器&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apple Watch 或 iPhone (取决于下方条件)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;静默(Slient)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;后台服务器&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;仅限iPhone&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;如何判断活跃设备&quot;&gt;如何判断活跃设备&lt;/h3&gt;

&lt;p&gt;在通知的接收者中, 会有&lt;code class=&quot;highlighter-rouge&quot;&gt;Apple Watch 或 iPhone (取决于下方条件)&lt;/code&gt;的情况。它就是一个过程条件, 系统去判断到底哪个设备是当前最有可能获取用户焦点的设备。具体的判断条件也很符合用户的日常习惯:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.当 iPhone处于未锁屏的状态时, 通知将会推送至 iPhone上。&lt;/li&gt;
  &lt;li&gt;2.当 Apple Watch没有在用户的手腕上, 通知将会推送至 iPhone上。&lt;/li&gt;
  &lt;li&gt;3.当 Apple Watch在用户的手腕上, 且 iPhone处于锁屏状态时, 通知将会推送至 Watch上。&lt;/li&gt;
  &lt;li&gt;4.如果用户有多个 Apple Watch，通知则会推送到安装了相应 Watch App的那一台设备上。&lt;/li&gt;
  &lt;li&gt;5.在推送远程通知时, 如果通知推送至 Watch上后, iPhone端是可以收到通知的, 但不会有任何提醒, 甚至屏幕都不会亮起。&lt;/li&gt;
  &lt;li&gt;6.如果想在没有佩戴 Apple Watch时对其推送, 也可以在常规设置中禁用手腕检测选项。但需要确保 Apple Watch没在充电器上。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;watchos-通知授权和配置&quot;&gt;WatchOS 通知授权和配置&lt;/h2&gt;

&lt;h3 id=&quot;通知授权&quot;&gt;通知授权&lt;/h3&gt;

&lt;p&gt;当 Watch App在执行涉及本地或远程通知的操作之前，必须要进行授权。因为 Watch App必须请求授权才能与用户进行交互, 而且就与 iOS中的通知授权一样。不仅如此, 就连流程和逻辑也是高度一致。第一次启动 Watch App或 iOS应用程序时，此方法会提示用户授予所请求的授权, 且应用程序的任何后续启动都不会再次提示用户。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNUserNotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;requestAuthorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;granted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;granted&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;授权成功&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;授权失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置模拟通知&quot;&gt;配置模拟通知&lt;/h3&gt;

&lt;p&gt;当你把 Watch App的通知功能开启后, 会在文件目录中发现一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;PushNotificationPayload.apns&lt;/code&gt;的文件, 这个文件里的代码就是配置 Watch App通知的模拟数据。当你想要模拟通知推送时, 去运行&lt;code class=&quot;highlighter-rouge&quot;&gt;Watch App (Notification)&lt;/code&gt;的 target就可以了。当然, 这是 Watch App中才会有的功能, 在 iOS中是没有模拟通知的。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/20180829131428101.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PushNotificationPayload.apns&lt;/code&gt;中的模拟数据的例子:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;aps&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;alert&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I AM TITLE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is content, or call me body.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;category&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;customCategoryIdentifier&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;WatchKit Simulator Actions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I Konw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&quot;identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KonwID&quot;&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Don't Care&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&quot;identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NotCareID&quot;&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Don't Push&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                   &lt;span class=&quot;s&quot;&gt;&quot;identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NotPushID&quot;&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;}],&lt;/span&gt;
    
    &lt;span class=&quot;s&quot;&gt;&quot;customKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Use this file to define a testing payload for your notifications. The aps dictionary specifies the category, alert text and title. The WatchKit Simulator Actions array can provide info for one or more action buttons in addition to the standard Dismiss button. Any other top level keys are custom payload. If you have multiple such JSON files in your project, you'll be able to select them when choosing to debug the notification interface of your Watch App.&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;字段&lt;code class=&quot;highlighter-rouge&quot;&gt;apn&lt;/code&gt;对应的值是模拟普通通知的数据, 通知有个一个标识符&lt;code class=&quot;highlighter-rouge&quot;&gt;CategoryIdentifier&lt;/code&gt;属性, 不同类型的通知可以设置不同的标识符进行区分。
字段&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchKit Simulator Actions&lt;/code&gt;对应的值则模拟了可操作的通知选项(UNNotificationAction, 以下也简称Action)。当包含自定义操作(Action)时，系统会向通知界面添加按钮，每个按钮都具有一个自定义操作的标题。另外, &lt;code class=&quot;highlighter-rouge&quot;&gt;customKey&lt;/code&gt;代表自定义的一些键值对数据。&lt;/p&gt;

&lt;p&gt;当运行这个含有可操作项的模拟数据后, 接收的通知如下:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-5/20180829133018933.png&quot; width=&quot;20%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;配置真实通知&quot;&gt;配置真实通知&lt;/h3&gt;

&lt;p&gt;在配置真实通知时, 配置&lt;code class=&quot;highlighter-rouge&quot;&gt;apn&lt;/code&gt;中的数据与上面配置模拟数据相同。但是, 与配置模拟数据的区别在于, 无论你如何配置&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchKit Simulator Actions&lt;/code&gt;中的数据, 都不会有对应的Action的。当然你可以不需要这些自定义操作, 但如果你需要的话, 这就与 iOS 10.0之后的通知框架一样了, 所以你需要手动配置Action。而且, 需要配置在你的 iOS工程中, 它将会显示在你的通知接收设备上。&lt;/p&gt;

&lt;h4 id=&quot;配置可操作通知&quot;&gt;配置可操作通知&lt;/h4&gt;

&lt;p&gt;真实通知要自定义可操作选项(Action)，请创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;UNNotificationAction&lt;/code&gt;对象并将其添加到的指定的某个&lt;code class=&quot;highlighter-rouge&quot;&gt;UNNotificationCategory&lt;/code&gt;对象中。每个Action都是一个按钮, 包含相应标题以及如何显示按钮和处理相关任务的选项。当用户选择操作时，系统会为您的应用程序提供操作的&lt;code class=&quot;highlighter-rouge&quot;&gt;actionIdentifirer&lt;/code&gt;，然后就可以使用该标识进行区分执行不同的任务。&lt;/p&gt;

&lt;p&gt;需要配置在你的 iOS工程中的代码:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;generalCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNNotificationCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GENERAL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intentIdentifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customDismissAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Create the custom actions for the TIMER_EXPIRED category.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;snoozeAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNNotificationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SNOOZE_ACTION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Snooze&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNNotificationActionOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stopAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNNotificationAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;STOP_ACTION&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Stop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expiredCategory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNNotificationCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;TIMER_EXPIRED&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;snoozeAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stopAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intentIdentifiers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNNotificationCategoryOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 
&lt;span class=&quot;c1&quot;&gt;// Register the notification categories.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;center&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UNUserNotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setNotificationCategories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generalCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiredCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;响应可操作选项&quot;&gt;响应可操作选项&lt;/h4&gt;

&lt;p&gt;当用户点击通知的可操作按钮时，用户的响应将传递到 iOS App或 Watch Extension中去处理。哪个应用程序收到响应取决于当前&lt;code class=&quot;highlighter-rouge&quot;&gt;Action&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;前台模式&lt;/code&gt;还是&lt;code class=&quot;highlighter-rouge&quot;&gt;后台模式&lt;/code&gt;。在创建时如果不指定&lt;code class=&quot;highlighter-rouge&quot;&gt;UNNotificationAction&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;UNNotificationActionOptionForeground&lt;/code&gt;选项, 则Action默认为后台操作。&lt;/p&gt;

&lt;p&gt;对于前台模式的操作, 始终由响应操作的设备去处理。对于后台操作，操作的处理还取决于通知被推送到哪个设备上：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;1.对于前台模式的操作, 始终由响应操作的 App去处理。&lt;/li&gt;
  &lt;li&gt;2.对于 Apple Watch上本地通知的后台模式操作，由 Watch App处理。&lt;/li&gt;
  &lt;li&gt;3.对于在 iPhone上本地通知的后台模式操作，无论哪个设备显示通知，后台操作都是由 iOS App处理。&lt;/li&gt;
  &lt;li&gt;4.于远程通知的后台模式操作，无论哪个设备显示通知，后台操作始终由 iOS App处理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结如下表格:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;-&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;iPhone本地通知&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Watch本地通知&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;远程通知&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Action(前台)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;响应设备处理&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;响应设备处理&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;响应设备处理&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Action(后台)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS处理&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;WatchOS处理&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS处理&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;WatchOS开发教程之一: Watch App架构及生命周期&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;WatchOS开发教程之二: 布局适配和系统Icon设计尺寸&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89&quot;&gt;WatchOS开发教程之三: 导航方式和控件详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B&quot;&gt;WatchOS开发教程之四: Watch与 iPhone的通信和数据共享&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94&quot;&gt;WatchOS开发教程之五: 通知功能开发&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD&quot;&gt;WatchOS开发教程之六: 表盘功能开发&lt;/a&gt;  &lt;a href=&quot;https://github.com/wangyanchang21/Watch-App-Sampler&quot;&gt;WatchOS 开发教程源码：Watch-App-Sampler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/BasicSupport.html#//apple_ref/doc/uid/TP40014969-CH18-SW1&quot;&gt;Notification Essentials&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/SupportingNotificationsinYourApp.html#//apple_ref/doc/uid/TP40008194-CH4-SW1&quot;&gt;Configuring Categories and Actionable Notifications&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 30 Aug 2018 02:39:09 +0800</pubDate>
        <link>http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94/</guid>
        
        <category>watchOS</category>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>WatchOS开发教程之四: Watch与 iPhone的通信和数据共享</title>
        <description>&lt;p&gt;Watch与 iPhone之间的通信、WatchConnectivity通信框架、数据共享等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#apple-watch与iphone之间的通信&quot;&gt;Apple Watch与iPhone之间的通信&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#watchconnectivity框架&quot;&gt;WatchConnectivity框架&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wcsession&quot;&gt;WCSession&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#session的配置和激活&quot;&gt;Session的配置和激活&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#选择合适的通信方式&quot;&gt;选择合适的通信方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#传输数据处理&quot;&gt;传输数据处理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#代码描述&quot;&gt;代码描述&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#数据共享&quot;&gt;数据共享&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#watch-app和-watchkit-extension间数据共享&quot;&gt;Watch App和 WatchKit Extension间数据共享&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#文件存储&quot;&gt;文件存储&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#数据备份&quot;&gt;数据备份&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#icloud&quot;&gt;iCloud&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;apple-watch与iphone之间的通信&quot;&gt;Apple Watch与iPhone之间的通信&lt;/h2&gt;

&lt;p&gt;在第一篇文章&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;Watch App架构及生命周期&lt;/a&gt;的最后, 我们提到过: 避免长时间运行的任务。由于与 Watch App的交互通常很简短, 因此在长时间运行的任务完成之前, 可能会暂停 WatchKit Extension。 执行任何长时间运行任务的最佳解决方案是在 iOS App中执行该任务, 然后将数据传输给 Apple Watch。&lt;/p&gt;

&lt;p&gt;所以, 今天来说一说Apple Watch与iPhone之间的通信是如何实现的。&lt;/p&gt;

&lt;h3 id=&quot;watchconnectivity框架&quot;&gt;WatchConnectivity框架&lt;/h3&gt;

&lt;p&gt;在 WatchOS中有个&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchConnectivity框架&lt;/code&gt;, 是专门负责 WatchOS与 iOS之间的通信的。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;在 WatchKit Extension和 iOS App之间进行通信。该框架提供了两个进程之间的双向通信，并允许在前台或后台进行数据和文件的传输。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;提供了几种在 iOS 和 WatchKit Extension之间发送数据的选项, 每个选项都用于不同的用途。大多数选项在后台执行单向数据传输，而且是提供更新的便捷方式。前台传输让你的应用立即发送消息并等待回复。&lt;/p&gt;

&lt;p&gt;对于大多数类型的传输，您提供一个&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;包含要发送的数据的对象。字典的键和值必须都是属性列表类型，因为数据必须序列化并以无线方式发送。属性列表类型是指Foundation框架中的&lt;code class=&quot;highlighter-rouge&quot;&gt;NSNumbe&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSString&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSArray&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Bool&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDate&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;等数据类型。如果需要包含非属性列表类型的类型，请将它们打包到&lt;code class=&quot;highlighter-rouge&quot;&gt;NSData&lt;/code&gt;对象中，或者在发送之前将它们写入文件。此外，您发送的词典应该是紧凑的，并且只包含您需要的数据。保持字典较小可确保它们快速传输，并且不会在两台设备上消耗太多电量。&lt;/p&gt;

&lt;h3 id=&quot;wcsession&quot;&gt;WCSession&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchConnectivity框架&lt;/code&gt;中主要是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WCSession&lt;/code&gt;类进行数据传输的。来看下&lt;code class=&quot;highlighter-rouge&quot;&gt;WCSession&lt;/code&gt;这个类, 它有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt;单例。&lt;code class=&quot;highlighter-rouge&quot;&gt;default session&lt;/code&gt;用于在两个对应应用程序（即 iOS App及 WatchKit Extension）之间进行通信。&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;提供了发送，接收和跟踪状态的方法。&lt;/p&gt;

&lt;p&gt;您的 iOS App和 WatchOS App必须在执行期间的某个时刻创建和配置此类的实例。当两个会话对象都处于激活状态时，这两个进程可以通过发送消息立即进行通信。当只有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;处于激活状态时，&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;仍可以发送更新和传输文件，但这些传输在后台机会性地发生。&lt;/p&gt;

&lt;h3 id=&quot;session的配置和激活&quot;&gt;Session的配置和激活&lt;/h3&gt;

&lt;p&gt;在尝试发送消息或获取有关连接状态的信息之前，必须配置并激活&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;。 在激活&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;之前，可需要先进行一个检查当前 iOS设备是否支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;, 方法就是调用&lt;code class=&quot;highlighter-rouge&quot;&gt;isSupported()&lt;/code&gt;方法。&lt;/p&gt;

&lt;p&gt;在 iOS App中检查是否支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;并激活&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;的代码如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureWCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#available(iOS 9.0, *)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Some properties can be checked only for iOS Device&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// WCSession.default.isPaired&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// WCSession.default.isWatchAppInstalled&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// WCSession.default.isComplicationEnabled&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isSupported&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Current iOS device dot not support session&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The version of system is not available&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;WCSession&lt;/code&gt;类中, 还有一些属性是只能在 iOS App中使用的。比如, &lt;code class=&quot;highlighter-rouge&quot;&gt;isPaired&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;isWatchAppInstalled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;isComplicationEnabled&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;remainingComplicationUserInfoTransfers&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;watchDirectoryURL&lt;/code&gt;。这些都是仅仅在 iOS App中可用的, 都是标示当前设备的某些状态的。所以, 我们要在通信前利用好这些属性。&lt;/p&gt;

&lt;p&gt;在激活WatchKit Extension的&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;前, 不必检查是否支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;, 因为 WatchOS一定支持&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;。所以, 在 WatchKit Extension中&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;的配置和激活就相对简单一些:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configureWCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Don't need to check isSupport state, because session is always available on WatchOS&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if WCSession.isSupported() {}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;选择合适的通信方式&quot;&gt;选择合适的通信方式&lt;/h3&gt;

&lt;p&gt;WatchKit Extension与 iPhone间的通信方式有很多种, 可以分为前台实时传输和后台不定时传输两大传输类型。前台传输, 是实时传输, 消息字典传输和消息数据传输。后台传输又分为覆盖式传输, 队列式传输。队列式传输又分为字典传输, 文件传输, 表盘数据传输。一张图把这一切说清楚:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-4/20180715165920255.png&quot; width=&quot;100%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;后台传输&quot;&gt;后台传输&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;后台传输&lt;/code&gt;是异步执行的, 当发送方的应用退出时，后台传输将会继续。对应的接收方应用不需要运行也可以继续进行后台传输。并且在 WatchKit Extension与 iPhone进行传输的方法中, 所有的后台传输都是不定时传输。不定时意味着, 数据不一定会立即传输, 而是系统将在适当的时间传输内容。当然包括上面所说的在应用程序退出之后发生, 甚至是在双方应用都不运行时发生。接收方没有运行但传输成功了, 下次启动时将会触发相应的代理方法。&lt;/p&gt;

&lt;h4 id=&quot;后台覆盖式传输&quot;&gt;后台覆盖式传输&lt;/h4&gt;

&lt;p&gt;后台传输中&lt;code class=&quot;highlighter-rouge&quot;&gt;覆盖式&lt;/code&gt;的传输意味着, 当你进行数据传输时, 如果第一次发送的数据还没有送出去, 在此时进行第二次数据传递, 将会覆盖第一次的数据。这时数据接收方接收的数据只会有第二次的, 第一次的数据会丢失。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;的通信方法中, 后台覆盖式传输只有一个方法, 在 Objective-C中就是&lt;code class=&quot;highlighter-rouge&quot;&gt;updateApplicationContext:error:&lt;/code&gt;方法, 在 Swift中函数如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateApplicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throws&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般使用该方法将最近的状态信息传递给对方, 且只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;处于激活状态时才能调用此方法, 系统将会在适当的时间传输内容。使用此方法传输后, 发送的数据会存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationContext&lt;/code&gt;属性中, 而最新接收的数据会存储在&lt;code class=&quot;highlighter-rouge&quot;&gt;receivedApplicationContext&lt;/code&gt;属性中。&lt;/p&gt;

&lt;p&gt;接收方可以遵从 &lt;code class=&quot;highlighter-rouge&quot;&gt;WCSessionDelegate&lt;/code&gt;的协议, 在这些代理方法中, 有一个是与上面的方法成对存在的。接收方若实现了下面的代理方法, 当数据发送方在调用上面的方法后, 将会触发它们:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveApplicationContext&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;applicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;后台队列式传输&quot;&gt;后台队列式传输&lt;/h4&gt;

&lt;p&gt;后台传输中&lt;code class=&quot;highlighter-rouge&quot;&gt;队列式&lt;/code&gt;的传输意味着, 后一次的传输不会覆盖前一次所传输的数据。系统会把所有的数据按照次序进行发送。在&lt;code class=&quot;highlighter-rouge&quot;&gt;Connectivity框架&lt;/code&gt;的通信方法中, 后台队列式有三个方法, 后台队列式字典传输, 后台队列式文件传输, 后台队列式表盘数据传输。&lt;/p&gt;

&lt;h4 id=&quot;后台队列式字典传输&quot;&gt;后台队列式字典传输&lt;/h4&gt;

&lt;p&gt;在 Objective-C中后台队列式字典传输的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;transferUserInfo:&lt;/code&gt;, 在 Swift中函数如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transferUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionUserInfoTransfer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此方法可以传输一个字典, 且只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;处于激活状态时才能调用此方法。系统将&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;字典按序排入队列, 并在适当的时候将其传输到接收方应用中。你还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;outstandingUserInfoTransfers&lt;/code&gt;属性来获取仍在传输中(即未被接收方取消, 失败或已接收)的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;数组。&lt;/p&gt;

&lt;p&gt;接收方可以遵从 &lt;code class=&quot;highlighter-rouge&quot;&gt;WCSessionDelegate&lt;/code&gt;的协议, 在这些代理方法中, 有两个是与上面的方法成对存在的。接收方若实现了下面的代理方法, 当数据发送方在调用上面的方法后, 将会触发它们:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveUserInfo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:])&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinish&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfoTransfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionUserInfoTransfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;后台队列式文件传输&quot;&gt;后台队列式文件传输&lt;/h4&gt;

&lt;p&gt;在 Objective-C中后台队列式文件传输的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;transferFile:metadata:&lt;/code&gt;, 在 Swift中函数如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transferFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionFileTransfer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此方法可以传输一个文件和一个可选字典, 且只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;处于激活状态时才能调用此方法。你还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;outstandingFileTransfers&lt;/code&gt;属性来获取仍在传输中(即未被接收方取消, 失败或已接收)的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;数组。&lt;/p&gt;

&lt;p&gt;接收方可以遵从 &lt;code class=&quot;highlighter-rouge&quot;&gt;WCSessionDelegate&lt;/code&gt;的协议, 在这些代理方法中, 有两个是与上面的方法成对存在的。接收方若实现了下面的代理方法, 当数据发送方在调用上面的方法后, 将会触发它们:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceive&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;optional&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didFinish&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fileTransfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionFileTransfer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里需要注意的是, 接收到的文件存放在本地临时路径&lt;code class=&quot;highlighter-rouge&quot;&gt;Documents/Inbox/&lt;/code&gt;中, 代理方法&lt;code class=&quot;highlighter-rouge&quot;&gt;session(_ session: WCSession, didReceive file: WCSessionFile)&lt;/code&gt;结束后系统会将文件删除。所以你需要接收到文件后, 立即对其进行读取或者移动。&lt;/p&gt;

&lt;h4 id=&quot;后台队列式表盘数据传输&quot;&gt;后台队列式表盘数据传输&lt;/h4&gt;

&lt;p&gt;在 Objective-C中后台队列式表盘数据传输的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;transferCurrentComplicationUserInfo:&lt;/code&gt;, 在 Swift中函数如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transferCurrentComplicationUserInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[:])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSessionUserInfoTransfer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此方法涉及到 WatchOS的表盘功能也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Complication&lt;/code&gt;功能, 且只适用于 iPhone向 WatchKit Extension发送表盘功能相关的数据。此方法将包含表盘功能的最新信息的字典&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;排入队列中。并且只有在&lt;code class=&quot;highlighter-rouge&quot;&gt;Session&lt;/code&gt;处于激活状态时才能调用此方法。&lt;/p&gt;

&lt;p&gt;与之相关的属性有&lt;code class=&quot;highlighter-rouge&quot;&gt;remainingComplicationUserInfoTransfers&lt;/code&gt;, 它标示这&lt;code class=&quot;highlighter-rouge&quot;&gt;transferCurrentComplicationUserInfo:&lt;/code&gt;方法的剩余调用次数。在系统开始将表盘&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;作为常规&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;传输之前。 如果此属性为0，则表盘&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;将作为常规&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;传输。 当 Watch应用未启用表盘功能时, 其计数也为0。&lt;/p&gt;

&lt;p&gt;如果启用了表盘功能, 系统将立即尝试向 WatchKit Extension传输此&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;, 且传输为高优先级。一旦收到当前的表盘功能的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;, 系统将在后台启动 WatchKit Extension并允许其更新并表盘内容。如果当前用户信息无法传输(即设备断开连接, 超出后台启动预算等), 它将在&lt;code class=&quot;highlighter-rouge&quot;&gt;outstandingUserInfoTransfers&lt;/code&gt;队列中等待, 直到下一个合适的时间。&lt;/p&gt;

&lt;p&gt;需要注意的是, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;outstandingUserInfoTransfers&lt;/code&gt;队列中只能有一个当前的表盘的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;。如果当前表盘&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;还在队列当中(等待传输), 并且再次传输了一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;, 则新&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;将被标记为当前需要传输的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;。而先前的&lt;code class=&quot;highlighter-rouge&quot;&gt;userInfo&lt;/code&gt;将被取消标记, 那么无论如何它都将一直存在于&lt;code class=&quot;highlighter-rouge&quot;&gt;outstandingUserInfoTransfers&lt;/code&gt;队列中了。&lt;/p&gt;

&lt;p&gt;表盘功能传输中接收方(即 Watch端)可以实现的代理与后台队列式字典传输的代理相同。&lt;/p&gt;

&lt;h4 id=&quot;前台传输&quot;&gt;前台传输&lt;/h4&gt;

&lt;p&gt;在 WatchKit Extension与 iPhone进行传输的方法中, 前台传输是实时的, 且是队列式的传输方式。具体有两种方法, 一种是传输消息字典, 另一种是传输消息数据。&lt;/p&gt;

&lt;h4 id=&quot;前台消息字典传输&quot;&gt;前台消息字典传输&lt;/h4&gt;

&lt;p&gt;在 Objective-C中前台消息字典传输的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;sendMessage:replyHandler:errorHandler:&lt;/code&gt;, 在 Swift中函数如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此方法传入一个消息字典, 一个处理接收方回复的block, 以及一个错误处理block。消息的传递是异步的、高优先级的, 且只有在会话处于活动状态时才能调用此方法。如果指定了处理接收方回复的block, 则该block也会在后台线程上异步执行。&lt;/p&gt;

&lt;p&gt;需要注意的是, 从 WatchKit Extension激活并运行时调用此方法会在后台唤醒相应的 iOS App并使其可访问。但若从 iOS App调用此方法则不会唤醒相应的WatchKit Extension。如果调用此方法时接收方无法访问(即&lt;code class=&quot;highlighter-rouge&quot;&gt;isReachable&lt;/code&gt;是 false), 则会执行&lt;code class=&quot;highlighter-rouge&quot;&gt;errorHandler&lt;/code&gt;block并显示相应的错误。&lt;/p&gt;

&lt;p&gt;那么&lt;code class=&quot;highlighter-rouge&quot;&gt;isReachable&lt;/code&gt;什么时候是&lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;呢? 对于 WatchKit Extension来说, iOS设备在范围内, 因此可以进行通信并且 WatchKit Extension在前台运行，或者在后台运行时具有高优先级(例如, 在锻炼会话期间或当表盘加载其初始时间轴数据时); 对于 iOS来说, 配对且激活的 Apple Watch在范围内, 相应的WatchKit Extension正在运行。只要这样&lt;code class=&quot;highlighter-rouge&quot;&gt;isReachable&lt;/code&gt;属性才会为true。&lt;/p&gt;

&lt;p&gt;而且当传输的消息字典中包含非属性列表数据类型, 也会调用&lt;code class=&quot;highlighter-rouge&quot;&gt;errorHandler&lt;/code&gt;block。其他的类型数据应该用你下面的方法来进行传输。&lt;/p&gt;

&lt;h4 id=&quot;前台消息数据传输&quot;&gt;前台消息数据传输&lt;/h4&gt;

&lt;p&gt;在 Objective-C中前台消息字典传输的方法是&lt;code class=&quot;highlighter-rouge&quot;&gt;sendMessageData:replyHandler:errorHandler:&lt;/code&gt;, 在 Swift中函数如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sendMessageData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;errorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Swift&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此方法与消息字典传输的方法的区别在于所传输的主体内容为&lt;code class=&quot;highlighter-rouge&quot;&gt;Data&lt;/code&gt;类型。包含非属性列表数据类型的传输, 就需要使用此方法了, 否则用上面方法将会报错。&lt;/p&gt;

&lt;h3 id=&quot;传输数据处理&quot;&gt;传输数据处理&lt;/h3&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-4/20180716222544227.png&quot; width=&quot;60%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;当你选择了合适的方式进行数据通信后, 就是处理这些接收到的数据和处理接收方回复了。核心就是在&lt;code class=&quot;highlighter-rouge&quot;&gt;WCSessionDelegate&lt;/code&gt;中不同传输方式对应的不同代理方法中去处理。其实, 这些上面每个方法中已经详细说过了, 但为了知识的结构这里还是有必要提一下的, 详细的这里不赘述了。&lt;/p&gt;

&lt;h3 id=&quot;代码描述&quot;&gt;代码描述&lt;/h3&gt;

&lt;p&gt;以前台消息字典传输为例, 由 WatchKit Extension向 iOS App发送消息。 WatchKit Extension中代码如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReachable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Apple Watch is not reachable.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The counterpart is not available for living messageing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;timeIntervalSinceNow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Apple send a messge to iPhone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;watchMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The Date is &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replyMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replyMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replyMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;replyContent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localizedDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;WatchKit Extension中实现对应代理方法, 以处理 iOS App发回的回复数据:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveMessage&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;DispatchQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sync&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;contentLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iPhoneMessage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;iOS App也应实现对应代理, 以处理接收到的数据:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@available(iOS 9.0, *)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WCSession&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didReceiveMessage&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;@escaping&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;replyHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;received successfully&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;replyContent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is a reply from iPhone&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;数据共享&quot;&gt;数据共享&lt;/h2&gt;

&lt;h3 id=&quot;watch-app和-watchkit-extension间数据共享&quot;&gt;Watch App和 WatchKit Extension间数据共享&lt;/h3&gt;

&lt;p&gt;在运行时可以使用共享&lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;在 Watch App和 WatchKit Extension之间共享媒体文件。 &lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;创建一个多个进程可以访问的安全容器。 通常每个进程都在自己的沙箱环境中运行, 但是&lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;允许两个进程共享一个公共目录。&lt;/p&gt;

&lt;h4 id=&quot;如何使用共享app-group&quot;&gt;如何使用共享&lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;1.在Xcode中打开项目的Capabilities选项卡。&lt;br /&gt;
2.启用&lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;功能。这将会添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;entitlement file&lt;/code&gt;到指定的Target，并将一个唯一标识的&lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;添加到该文件中。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-4/20180716220300372.png&quot; width=&quot;80%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;3.且需要注意Watch App和 WatchKit Extension的 Target必须都启用相同的&lt;code class=&quot;highlighter-rouge&quot;&gt;App Group&lt;/code&gt;。&lt;br /&gt;
4.访问其中内容时, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSFileManager&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;containerURLForSecurityApplicationGroupIdentifier:&lt;/code&gt;方法取得文件的URL。&lt;/p&gt;

&lt;h3 id=&quot;文件存储&quot;&gt;文件存储&lt;/h3&gt;

&lt;p&gt;WatchKit Extension的存储目录与iOS App的存储目录具有相同的基本结构。将用户数据和其他关键信息放在&lt;code class=&quot;highlighter-rouge&quot;&gt;Documents&lt;/code&gt;目录中。如果将文件放在&lt;code class=&quot;highlighter-rouge&quot;&gt;Caches&lt;/code&gt;目录中, 磁盘空间量较低时系统会删除它们。&lt;/p&gt;

&lt;h3 id=&quot;数据备份&quot;&gt;数据备份&lt;/h3&gt;

&lt;p&gt;Apple Watch不会自动备份WatchKit Extension保存的文件。如果需要备份 Watch App中的数据, 则必须将该数据明确传输回iOS App并将其保存在那里。&lt;/p&gt;

&lt;h3 id=&quot;icloud&quot;&gt;iCloud&lt;/h3&gt;

&lt;p&gt;从 WatchOS 3开始, WatchKit Extension可以直接与&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudKit&lt;/code&gt;和其他iCloud技术进行通信。&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;WatchOS开发教程之一: Watch App架构及生命周期&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;WatchOS开发教程之二: 布局适配和系统Icon设计尺寸&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89&quot;&gt;WatchOS开发教程之三: 导航方式和控件详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B&quot;&gt;WatchOS开发教程之四: Watch与 iPhone的通信和数据共享&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94&quot;&gt;WatchOS开发教程之五: 通知功能开发&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD&quot;&gt;WatchOS开发教程之六: 表盘功能开发&lt;/a&gt;  &lt;a href=&quot;https://github.com/wangyanchang21/Watch-App-Sampler&quot;&gt;WatchOS 开发教程源码：Watch-App-Sampler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/SharingData.html#//apple_ref/doc/uid/TP40014969-CH29-SW1&quot;&gt;Sharing Data&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Jul 2018 06:04:16 +0800</pubDate>
        <link>http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B/</guid>
        
        <category>watchOS</category>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>WatchOS开发教程之三: 导航方式和控件详解</title>
        <description>&lt;p&gt;Watch App中两种导航样式的说明和各种控件基本介绍和使用。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#导航方式&quot;&gt;导航方式&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#page-based&quot;&gt;Page based&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#hierarchical&quot;&gt;Hierarchical&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#控件详解&quot;&gt;控件详解&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#wkinterfaceimage&quot;&gt;WKInterfaceImage&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wkinterfacegroup&quot;&gt;WKInterfaceGroup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wkalertcontrollerstyle&quot;&gt;WKAlertControllerStyle&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wkinterfacepicker&quot;&gt;WKInterfacePicker&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wkinterfacetable&quot;&gt;WKInterfaceTable&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wkinterfacemenu&quot;&gt;WKInterfaceMenu&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#wkinterfacecontroller中的present方法&quot;&gt;WKInterfaceController中的Present方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#watchos中的其它控件和类&quot;&gt;WatchOS中的其它控件和类&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;导航方式&quot;&gt;导航方式&lt;/h2&gt;

&lt;p&gt;Watch App中导航样式分为两种：分页样式(Page based) 和分层样式(Hierarchical), 这两种样式是互斥的，所以不能混合使用只能选择其一。&lt;code class=&quot;highlighter-rouge&quot;&gt;Hierarchical&lt;/code&gt;方式可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;pushController&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;presentController&lt;/code&gt;来显示二级页面; 而&lt;code class=&quot;highlighter-rouge&quot;&gt;Page based&lt;/code&gt;方式只能通过&lt;code class=&quot;highlighter-rouge&quot;&gt;presentController&lt;/code&gt;来模态出新的二级页面。&lt;/p&gt;

&lt;h3 id=&quot;page-based&quot;&gt;Page based&lt;/h3&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180710115232892.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;分页样式导航(Page-based)是一种呈现平面信息集合的方式, 其中所有页面都是平级的。在分页样式导航中, 用户水平滑动或者垂直滑动以在页面之间导航, 并且白点表示它们在页面集中的位置。由于浏览大量页面可能非常耗时, 因此请限制界面中包含的页数。&lt;/p&gt;

&lt;h3 id=&quot;hierarchical&quot;&gt;Hierarchical&lt;/h3&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/2018071011532053.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;分层导航非常适合分层信息的应用程序。它还可以更轻松地扩展应用的新内容。当用户点击层次结构中的项目时，会出现一个新屏幕，显示有关该项目的详细信息。通过垂直基于页面的导航，用户还可以使用数字表冠或在详细视图上垂直滑动，在不同行的详细视图之间快速导航。但要尽量避免创建深度超过2-3级的层次结构。&lt;/p&gt;

&lt;h2 id=&quot;控件详解&quot;&gt;控件详解&lt;/h2&gt;

&lt;p&gt;iOS中的大部分控件在 WatchOS中也在有, 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceLabel&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceImage&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceButton&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfacePicker&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceTable&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceSwitch&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceSlider&lt;/code&gt;、等类。还有一些 WatchOS特有的类, 比如: &lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceGroup&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceSeparator&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMenu&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceDate&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceTimer&lt;/code&gt;等类。下面我将对部分控件进行详细的使用说明。&lt;/p&gt;

&lt;h3 id=&quot;wkinterfaceimage&quot;&gt;WKInterfaceImage&lt;/h3&gt;

&lt;h4 id=&quot;image相关控件&quot;&gt;Image相关控件&lt;/h4&gt;

&lt;p&gt;WatchOS中很多控件都可以与&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceImage&lt;/code&gt;类结合使用: &lt;br /&gt;
1.&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceGroup&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceButton&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;类允许您指定图像作为其背景。&lt;br /&gt;
2.&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceSlider&lt;/code&gt;类可以显示增量和减量控件的自定义图像。&lt;br /&gt;
3.&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMovie&lt;/code&gt;类显示视频或音频内容的海报图像。&lt;br /&gt;
4.&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfacePicker&lt;/code&gt;类显示可包含图像的项目。&lt;/p&gt;

&lt;h4 id=&quot;image性能&quot;&gt;Image性能&lt;/h4&gt;

&lt;p&gt;关于图片的使用有一个坑需要注意, 当我们为&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceImage&lt;/code&gt;类添加图片时, 可能会遇到图片不显示的问题。这是因为所使用的方法和图片资源库是有一定的关系的。&lt;br /&gt;
1.当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;setImageNamed:&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;setBackgroundImageNamed:&lt;/code&gt;方法添加图片时, 应该使用 Watch App包内&lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xcassets&lt;/code&gt;中的已有的图片资源。&lt;br /&gt;
2.当使用&lt;code class=&quot;highlighter-rouge&quot;&gt;setImage:&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;setImageData:&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;setBackgroundImage:&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;setBackgroundImageData:&lt;/code&gt;方法添加图片时, 应该使用 WatchKit Extension包内&lt;code class=&quot;highlighter-rouge&quot;&gt;Assets.xcassets&lt;/code&gt;中的图片资源。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180711185214546.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;使用第2条的方式时, 会先在 WatchKit Extension中创建 Image, 然后在传输到 WatchKit App中进行显示。而在第1条中按名称指定图像更有效，因为只需要将名称字符串传输到您的Watch App中, 然后会在 Watch App包中搜索指定名称的图像文件, 并进行显示。所以指定图像的最有效方法是将它们存储在 Watch App包中，并使用&lt;code class=&quot;highlighter-rouge&quot;&gt;setImageNamed:&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;setBackgroundImageNamed:&lt;/code&gt;适当地配置相应的对象。&lt;/p&gt;

&lt;h3 id=&quot;wkinterfacegroup&quot;&gt;WKInterfaceGroup&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceGroup&lt;/code&gt;在 WatchOS中的一个很特别的类, 它是一个容器性质的控件, 能为其他控件提供额外的布局。&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;可以指定其所包含控件的排列方向, 横向或者纵向, 也可以设置间距和内嵌。它还能为自己添加背景图片, 作为一个种控件叠加的效果这是一个不错的选择, 因为在 WatchOS中是不允许控件相互重叠的, 除了像&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;这样容器类的控件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;中还有一些属性如下:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180710165815831.png&quot; width=&quot;30%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;wkalertcontrollerstyle&quot;&gt;WKAlertControllerStyle&lt;/h3&gt;

&lt;p&gt;自 WatchOS 2.0开始, 就已经支持系统 Alert了, &lt;code class=&quot;highlighter-rouge&quot;&gt;WKAlertControllerStyle&lt;/code&gt;枚举类型包含以下三种:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertControllerStyle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sideBySideButtonsAlert&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actionSheet&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;它们对应的样式是这样的:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180710174004334.png&quot; width=&quot;60%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;代码描述&quot;&gt;代码描述&lt;/h4&gt;

&lt;p&gt;在当前页面创建三个按钮, 点击事件别分展示不同类型的 Alert。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180710174102679.png&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;具体代码如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentAlertStyleAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;confirmAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;denyAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destructive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Cancel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cancel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Do you want to see it.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denyAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentSideBySideStyleAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;confirmAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;denyAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destructive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Do you want to see it.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sideBySideButtonsAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denyAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentSheetStyleAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;confirmAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Ok&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;denyAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destructive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Deny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cancelAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Custom Cancel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cancel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Tip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Do you want to see it.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionSheet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;confirmAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denyAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;运行效果&quot;&gt;运行效果&lt;/h4&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712150255672.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;wkinterfacepicker&quot;&gt;WKInterfacePicker&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfacePicker&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Style属性&lt;/code&gt;有三种, 分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Stack&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Sequence&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;Focus Style属性&lt;/code&gt;也有三种分别是&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Outline&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Outline with Caption&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在 Storyboard中我们先添加3个Picker, 然后要对它们进行设置不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;Style属性&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Focus Style属性&lt;/code&gt;。目的是为了, 对比它们之前的区别。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180710180544326.png&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;代码描述-1&quot;&gt;代码描述&lt;/h4&gt;

&lt;p&gt;3个&lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt;关联到代码文件, 懒加载配置数据:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;listPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfacePicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stackPicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfacePicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sequencePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfacePicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WKPickerItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;its&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WKPickerItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;①&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;②&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;③&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;④&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;⑤&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;captions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;① is one&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;② is two&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;③ is three&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;④ is four&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;⑤ is five&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKPickerItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;caption&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;captions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item_type_&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessoryImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;imageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentImage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;imageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;	
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;初始化的时候, 对3个&lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt;进行配置:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;awake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withContext&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;awake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;listPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stackPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sequencePicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;listPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt;添加的Action:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;listPickerSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stackPickerSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sequencePickerSelect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重写在&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;类中有关于&lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt;的方法, 当&lt;code class=&quot;highlighter-rouge&quot;&gt;Picker&lt;/code&gt;获得焦点、失去焦点、选择保持稳定时会触发的方法:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pickerDidFocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfacePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listPicker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ListPicker Did Focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackPicker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StackPicker Did Focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SequencePicker Did Focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pickerDidResignFocus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfacePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listPicker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ListPicker Did Resign Focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackPicker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StackPicker Did Resign Focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SequencePicker Did Resign Focus&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pickerDidSettle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;picker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfacePicker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listPicker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ListPicker Did Settle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;picker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stackPicker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;StackPicker Did Settle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SequencePicker settle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;运行效果-1&quot;&gt;运行效果&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180711113502823.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Stack&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Outline&lt;/code&gt;:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180711113558538.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Sequence&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Outline with Caption&lt;/code&gt;:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180711113604414.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;wkinterfacetable&quot;&gt;WKInterfaceTable&lt;/h3&gt;

&lt;h4 id=&quot;wkinterfacetable和-uitableview的区别&quot;&gt;WKInterfaceTable和 UITableView的区别&lt;/h4&gt;

&lt;p&gt;在 iOS中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;使用范围是很广的, 它可以实现列表性质的复杂功能。那么在 WatchOS中对应的类是&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceTable&lt;/code&gt;, 但功能上来说相对简单了许多。
1.&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;只有行的概念, 没有分区, 没有头尾视图的概念。&lt;br /&gt;
2.&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;通过Gruop进行自适应布局, 所以没有行高等设置。&lt;br /&gt;
3.&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;没有代理, 所有行的数据都是采用静态配置的方式。&lt;br /&gt;
4.&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;的点击事件也是依靠重写&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;的方法来实现的。&lt;br /&gt;
5.&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;中是通过自定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;TableRowController&lt;/code&gt;来进行控制 TableRow上显示的内容的。&lt;code class=&quot;highlighter-rouge&quot;&gt;TableRowController&lt;/code&gt;是一个继承于NSObject的类, 其实从根本上与 iOS中的&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewCell&lt;/code&gt;类似。&lt;/p&gt;

&lt;h4 id=&quot;如何使用table&quot;&gt;如何使用Table&lt;/h4&gt;

&lt;p&gt;1.在Storyboard中, 为页面添加一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;。&lt;br /&gt;
2.新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;TableRowController&lt;/code&gt;类继承与 NSObject的 Cocoa Touch类。&lt;br /&gt;
3.在Storyboard中, 为添加的&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;配置一个或多个&lt;code class=&quot;highlighter-rouge&quot;&gt;TableRowController&lt;/code&gt;, 并设置ID。&lt;br /&gt;
3.在代码中, 为&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;指定行数和&lt;code class=&quot;highlighter-rouge&quot;&gt;TableRowController&lt;/code&gt;类型。&lt;br /&gt;
4.为&lt;code class=&quot;highlighter-rouge&quot;&gt;TableRowController&lt;/code&gt;的每一行配置显示的数据。&lt;/p&gt;

&lt;h4 id=&quot;代码描述-2&quot;&gt;代码描述&lt;/h4&gt;

&lt;p&gt;Storyboard中的配置:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180711185741935.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180711185749584.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;的配置及点击事件处理:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;@IBOutlet&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfaceTable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item_type_0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Menu Action And Controller Life Cycle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item_type_1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Media Player&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item_type_2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Picker Styles&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item_type_3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Interactive Between iPhone And Watch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;item_type_3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Interactive Between iPhone And Watch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}()&lt;/span&gt;


    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;awake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withContext&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;awake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;// Set Row Number And Row Type&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setNumberOfRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withRowType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ItemRowController&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enumerated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rowController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as!&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemRowController&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titleLabel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setImageNamed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfaceTable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;didSelectRowAt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rowIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rowIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;运行效果-2&quot;&gt;运行效果&lt;/h4&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712102409731.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;wkinterfacemenu&quot;&gt;WKInterfaceMenu&lt;/h3&gt;

&lt;p&gt;Apple Watch的 Retina屏是支持 Force Touch功能的, 提供了一种新的交互方式。这是一个 WatchOS独有的类, 当页面中配置这 &lt;code class=&quot;highlighter-rouge&quot;&gt;Menu&lt;/code&gt;时, 按压屏幕将会激活页面中的&lt;code class=&quot;highlighter-rouge&quot;&gt;Menu&lt;/code&gt;。并且显示出&lt;code class=&quot;highlighter-rouge&quot;&gt;Menu&lt;/code&gt;下的操作, 这些操作是另一个类型, &lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMenuItem&lt;/code&gt;。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712104044557.png&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Menu&lt;/code&gt;最多可显示四个&lt;code class=&quot;highlighter-rouge&quot;&gt;MenuItem&lt;/code&gt;, 它们可以关联各自的点击事件, 从而进行你想要的各自操作。&lt;/p&gt;

&lt;h4 id=&quot;代码描述-3&quot;&gt;代码描述&lt;/h4&gt;

&lt;p&gt;在 Storyboard中为页面添加&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMenu&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMenuItem&lt;/code&gt;, 并为&lt;code class=&quot;highlighter-rouge&quot;&gt;MenuItem&lt;/code&gt;设置各自的&lt;code class=&quot;highlighter-rouge&quot;&gt;Image&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/2018071210504839.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;代码关联:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;menuActionInvest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;menuActionNotification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;menuActionQuestion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;menuActionShare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;#function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;运行效果-3&quot;&gt;运行效果&lt;/h4&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712105153886.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;wkinterfacecontroller中的present方法&quot;&gt;WKInterfaceController中的Present方法&lt;/h3&gt;
&lt;p&gt;在 WatchOS中&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;就相当于 iOS中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIVIewController&lt;/code&gt;, 同样具有类似生命周期和方法。 这里就不再赘述了, 想了解请查看第一篇文章:&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;Watch App架构及生命周期&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;在这里要说的是, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;中, 有许多重要的&lt;code class=&quot;highlighter-rouge&quot;&gt;Present方法&lt;/code&gt;, 这些功能我们可以直接使用, 更加方便了我们的开发。
像平时使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;presentController&lt;/code&gt;, 还有上面&lt;code class=&quot;highlighter-rouge&quot;&gt;Alert&lt;/code&gt;中涉及到一个, 另外, 还有一些关于文字录入的, 音视频播放的, 音频录制的。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withName&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// modal presentation&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;@available(watchOS 2.0, *)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;presentAlert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withTitle&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preferredStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKAlertControllerStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;actions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WKAlertAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;文字录入&quot;&gt;文字录入&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;presentTextInputController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withSuggestions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;When are you free?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Yes.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;allowedInputMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inputText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;stringArr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputText&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringArr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712114927276.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;音视频播放&quot;&gt;音视频播放&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@IBAction&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mp4PlayAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;playMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;music&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;.mp4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;playMedia&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// MediaPlayer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forResource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withExtension&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WKMediaPlayerControllerOptionsAutoplayKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;presentMediaPlayerController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;endTime=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endTime&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712131436714.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h4 id=&quot;音频录制&quot;&gt;音频录制&lt;/h4&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;textVoiceInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;option2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WKAudioRecorderControllerOptionsActionTitleKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;发送&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;WKAudioRecorderControllerOptionsAutorecordKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;WKAudioRecorderControllerOptionsMaximumDurationKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Use App Group URL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;uurl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;FileManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;containerURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forSecurityApplicationGroupIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;group.watchAppSampler.record&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;uuurl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uurl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;appendingPathComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;record.wav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;nf&quot;&gt;presentAudioRecorderController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;withOutputURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuurl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;preset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;narrowBandSpeech&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;option2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didSave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;didSave=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;didSave&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;error=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712130654386.gif&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;watchos中的其它控件和类&quot;&gt;WatchOS中的其它控件和类&lt;/h3&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;WatchKit框架&lt;/code&gt;中, 还有其它许多的控件和类, 这里就不在介绍了。附一张WatchOS 4.3版本下的所有类的全家福:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-3/20180712152718147.png&quot; width=&quot;25%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;WatchOS开发教程之一: Watch App架构及生命周期&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;WatchOS开发教程之二: 布局适配和系统Icon设计尺寸&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89&quot;&gt;WatchOS开发教程之三: 导航方式和控件详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B&quot;&gt;WatchOS开发教程之四: Watch与 iPhone的通信和数据共享&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94&quot;&gt;WatchOS开发教程之五: 通知功能开发&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD&quot;&gt;WatchOS开发教程之六: 表盘功能开发&lt;/a&gt;  &lt;a href=&quot;https://github.com/wangyanchang21/Watch-App-Sampler&quot;&gt;WatchOS 开发教程源码：Watch-App-Sampler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/InterfaceStyles.html#//apple_ref/doc/uid/TP40014969-CH12-SW1&quot;&gt;Interface Navigation&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Jul 2018 23:05:42 +0800</pubDate>
        <link>http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89/</guid>
        
        <category>watchOS</category>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>WatchOS开发教程之二: 布局适配和系统Icon设计尺寸</title>
        <description>&lt;p&gt;Apple Watch的布局方式和布局影响因素，以及不同尺寸屏幕的适配原理。另外，还有 Apple Watch系统 icon的设计尺寸和适配。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#布局和适配&quot;&gt;布局和适配&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#布局方式和布局因素&quot;&gt;布局方式和布局因素&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#apple-watch的尺寸和适配&quot;&gt;Apple Watch的尺寸和适配&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#系统icon设计尺寸&quot;&gt;系统icon设计尺寸&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#home-screen-icon&quot;&gt;Home Screen Icon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#short-look-notification-icon&quot;&gt;Short-look Notification Icon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#long-look-notification-icon&quot;&gt;Long-look Notification Icon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#notification-center-icon&quot;&gt;Notification Center Icon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#content-menu-icon&quot;&gt;Content Menu Icon&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#watch-app-icon-on-iphone&quot;&gt;Watch App Icon On iPhone&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#app-store&quot;&gt;App Store&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#线条像素&quot;&gt;线条像素&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;布局和适配&quot;&gt;布局和适配&lt;/h2&gt;

&lt;h3 id=&quot;布局方式和布局因素&quot;&gt;布局方式和布局因素&lt;/h3&gt;

&lt;p&gt;在 iOS App开发时, 我们可以选择纯代码工程或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard&lt;/code&gt;也或者&lt;code class=&quot;highlighter-rouge&quot;&gt;xib&lt;/code&gt;, 但在 Watch App开发时必须要用&lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard&lt;/code&gt;为基础来进行开发, 是不可以用纯代码进行实现的。&lt;/p&gt;

&lt;p&gt;先来看一下, 下面的布局结果:&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180706111219905.png&quot; width=&quot;40%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;WatchOS 中的布局方式和 iOS是不相同的, 在控件上的可操作性要比 iOS中少, 所以 WatchOS的布局要比 iOS中的简单许多。我们可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard&lt;/code&gt;中属性面板来调整各个控件的一些布局因素, 也有部分的布局因素是可以通过代码来设置的。布局的因素也主要有下面几种:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.在 WatchOS中 Xcode会自动为我们把添加的控件垂直的排列在InterfaceController的不同的行上。&lt;/li&gt;
  &lt;li&gt;2.位置和大小。而大小还包括固定大小和相对大小, 相对大小是指当前控件相对父视图的正比例大小。&lt;/li&gt;
  &lt;li&gt;3.排列对齐方式(Alignment)。WatchOS中布局因素中有很重要的一个就是在横向上和纵向上的排列对齐方式, 两个方向上有左、中、右和上、中、下各三个选项。&lt;/li&gt;
  &lt;li&gt;4.间距(Spacing)。调整当前容器性质的控件内既定方向上各个控件之间的距离, 默认值是4.0。&lt;/li&gt;
  &lt;li&gt;5.内嵌(Insets)。调整当前容器性质的控件内的上、下、左、右距各边的距离, 默认值是UIEdgeInsetsMake(0.0, 1.0, 0.0, 1.0)。&lt;/li&gt;
  &lt;li&gt;6.&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceGroup&lt;/code&gt;。WatchOS中的一个很特别的类, 它是一个容器性质的控件, 能为其他控件提供额外的布局。&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;可以指定其所包含控件的排列方向, 横向或者纵向或者重叠, 也可以设置间距和内嵌。它还能为自己添加背景图片, 作为一个种控件叠加的效果这是一个不错的选择, 因为在 WatchOS中是不允许控件相互重叠的, 除了像&lt;code class=&quot;highlighter-rouge&quot;&gt;Group&lt;/code&gt;这样容器类的控件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;apple-watch的尺寸和适配&quot;&gt;Apple Watch的尺寸和适配&lt;/h3&gt;

&lt;p&gt;首先我们需要知道Apple Watch有两种尺寸: 38mm和 42mm。&lt;/p&gt;

&lt;p&gt;在 WatchOS开发做适配时有两种方式可行, 第一种方式与 iOS开发类似, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;Storyboard&lt;/code&gt;页面下方有个&lt;code class=&quot;highlighter-rouge&quot;&gt;Device面板&lt;/code&gt;可以去选择不同尺寸的设备进行不同的页面布局。如下图:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/2018070611574665.png&quot; width=&quot;60%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;第二种方式是通过属性面板上对不同尺寸的设备进行不同的数值设置, 来做到适配。如下图:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180706141229250.png&quot; width=&quot;30%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;就像上图这样, 本来&lt;code class=&quot;highlighter-rouge&quot;&gt;Text&lt;/code&gt;属性只能设置一个值Value, 但当我们点击左侧的&lt;code class=&quot;highlighter-rouge&quot;&gt;+号&lt;/code&gt;时, 就能选择添加两种尺寸的设备分别设置数值了。当我们不需要的时候, 还可以点击&lt;code class=&quot;highlighter-rouge&quot;&gt;x号&lt;/code&gt;将其关闭。&lt;/p&gt;

&lt;h2 id=&quot;系统icon设计尺寸&quot;&gt;系统icon设计尺寸&lt;/h2&gt;

&lt;p&gt;两种 Apple Watch屏幕尺寸所对应的像素大小是这样的:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180706144911279.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;然后我们先来认知一下下面这几种icon, &lt;code class=&quot;highlighter-rouge&quot;&gt;Home Screen Icon&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Short-look Notification Icon&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Long-look Notification Icon&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Setting Icon &lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Content Menu Icon&lt;/code&gt;:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/2018070614475754.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;home-screen-icon&quot;&gt;Home Screen Icon&lt;/h3&gt;

&lt;p&gt;这是 Watch App在 Apple Watch主屏幕上的 icon, 没有任何辅助文本或标签, 主要用于承载 App的识别度和目的。&lt;/p&gt;
&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180706150406815.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;对于&lt;code class=&quot;highlighter-rouge&quot;&gt;38mm&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;42mm&lt;/code&gt;的两种设备来说, 主屏幕上的icon尺寸是相同的, 都是&lt;code class=&quot;highlighter-rouge&quot;&gt;80x80&lt;/code&gt;像素的2倍图。&lt;/p&gt;

&lt;h3 id=&quot;short-look-notification-icon&quot;&gt;Short-look Notification Icon&lt;/h3&gt;

&lt;p&gt;首先了解一下，Apple Watch上的通知分为两种：&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;long-lock&lt;/code&gt;。当Apple Watch首次收到通知时, 系统会显示短视界面, 如下图所示。&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;界面是一个无法定制的非滚动屏幕, 系统使用展示 App名称、图标以及通知标题的模板。如果用户继续查看通知，则系统会从&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;界面快速转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;long-lock&lt;/code&gt;界面。&lt;/p&gt;

&lt;p&gt;简而言之，&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;可以理解为一个简单的通知预览, 当Apple Watch首次收到通知时，系统会显示短视界面。&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;的通知界面我们不能自定义。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180706150835188.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Short-look Notification Icon在&lt;code class=&quot;highlighter-rouge&quot;&gt;38mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;172x172&lt;/code&gt;像素, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;42mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;196x196&lt;/code&gt;像素, 且都是2倍图。&lt;/p&gt;

&lt;h3 id=&quot;long-look-notification-icon&quot;&gt;Long-look Notification Icon&lt;/h3&gt;

&lt;p&gt;当正在显示&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;页面时, 如果用户继续查看这个通知，则系统会从&lt;code class=&quot;highlighter-rouge&quot;&gt;short-look&lt;/code&gt;页面转换为&lt;code class=&quot;highlighter-rouge&quot;&gt;long-look&lt;/code&gt;界面。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180706150903136.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Long-look Notification Icon在&lt;code class=&quot;highlighter-rouge&quot;&gt;38mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;80x80&lt;/code&gt;像素, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;42mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;88x88&lt;/code&gt;像素, 且都是2倍图。&lt;/p&gt;

&lt;h3 id=&quot;notification-center-icon&quot;&gt;Notification Center Icon&lt;/h3&gt;

&lt;p&gt;通知中心中显示的 icon如下:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180709154118619.png&quot; width=&quot;20%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Notification Center Icon在&lt;code class=&quot;highlighter-rouge&quot;&gt;38mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;48x48&lt;/code&gt;像素, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;42mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;55x55&lt;/code&gt;像素, 且都是2倍图。&lt;/p&gt;

&lt;h3 id=&quot;content-menu-icon&quot;&gt;Content Menu Icon&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchKit&lt;/code&gt;中有个类&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMenu&lt;/code&gt;, 它其中可以包含多个&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceMenuItem&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;MenuItem&lt;/code&gt;可以设置 title和 image, 且其 image的尺寸就如下图所示:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180709153749548.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Content Menu Icon在&lt;code class=&quot;highlighter-rouge&quot;&gt;38mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;70x70&lt;/code&gt;像素, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;42mm&lt;/code&gt;设备下是&lt;code class=&quot;highlighter-rouge&quot;&gt;80x80&lt;/code&gt;像素, 且都是2倍图。&lt;/p&gt;

&lt;h3 id=&quot;watch-app-icon-on-iphone&quot;&gt;Watch App Icon On iPhone&lt;/h3&gt;

&lt;p&gt;除了 Watch App使用的 icon外, 运行在 iPhone上的 Apple Watch App也需要一个相应的 icon。因为在 iPhone上显示, 所以既需要2倍图又需要3倍图了。
App Icon On iPhone在 iPhone上需要的尺寸是 &lt;code class=&quot;highlighter-rouge&quot;&gt;29x29&lt;/code&gt;pt, 即2倍图 &lt;code class=&quot;highlighter-rouge&quot;&gt;58x58&lt;/code&gt;像素, 3倍图&lt;code class=&quot;highlighter-rouge&quot;&gt;87x87&lt;/code&gt;像素。&lt;/p&gt;

&lt;h3 id=&quot;app-store&quot;&gt;App Store&lt;/h3&gt;

&lt;p&gt;App Store 也需要提交一个 App Icon, 用于进行展示。尺寸为&lt;code class=&quot;highlighter-rouge&quot;&gt;1024x1024&lt;/code&gt;像素, 且为1倍图。&lt;/p&gt;

&lt;h3 id=&quot;线条像素&quot;&gt;线条像素&lt;/h3&gt;

&lt;p&gt;针对不同的设计场景, 苹果建议使用如下线宽：&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-2/20180709163410345.png&quot; width=&quot;100%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Asset&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Watch(38mm)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Watch(42mm)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;iPhone&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;App Store&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Home Screen Icon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Short-look Notification Icon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;172 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;196 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Long-look Notification Icon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;88 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Notification Center Icon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;48 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;55 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Content Menu Icon&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;70 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80 pixels&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Watch App Icon On iPhone&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;58 pixels(@2x)/87 pixels(@3x)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;App Store&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;-&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1024 pixels&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;注意&quot;&gt;注意&lt;/h3&gt;

&lt;p&gt;1.Apple Watch仅使用2倍图, 所以上述所有 App Icon尺寸都是@2x图片。&lt;br /&gt;
2.如果还有不近详细的地方, 请查阅苹果官方文档 &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/watchos/icons-and-images/home-screen-icons/&quot;&gt;Icons And Images For Apple Watch&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;WatchOS开发教程之一: Watch App架构及生命周期&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;WatchOS开发教程之二: 布局适配和系统Icon设计尺寸&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89&quot;&gt;WatchOS开发教程之三: 导航方式和控件详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B&quot;&gt;WatchOS开发教程之四: Watch与 iPhone的通信和数据共享&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94&quot;&gt;WatchOS开发教程之五: 通知功能开发&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD&quot;&gt;WatchOS开发教程之六: 表盘功能开发&lt;/a&gt;  &lt;a href=&quot;https://github.com/wangyanchang21/Watch-App-Sampler&quot;&gt;WatchOS 开发教程源码：Watch-App-Sampler&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.cocoachina.com/design/20150519/11740.html&quot;&gt;Watch app icon设计终极指南&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/CreatingtheUserInterface.html#//apple_ref/doc/uid/TP40014969-CH4-SW1&quot;&gt;UI Essentials&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/watchos/icons-and-images/home-screen-icons/&quot;&gt;Human Interface Guidelines For Apple Watch&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Jul 2018 01:14:30 +0800</pubDate>
        <link>http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C/</guid>
        
        <category>watchOS</category>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>WatchOS开发教程之一: Watch App架构及生命周期</title>
        <description>&lt;p&gt;Watch App的架构组成，以及生命周期。另外，还有Apple Watch和 WatchOS的发展历史。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#写在前面&quot;&gt;写在前面&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#watch-app在项目中的结构&quot;&gt;Watch App在项目中的结构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#watch-app架构&quot;&gt;Watch App架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#watch-app的生命周期&quot;&gt;Watch App的生命周期&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#与-ios的技术共性&quot;&gt;与 iOS的技术共性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;写在前面&quot;&gt;写在前面&lt;/h2&gt;

&lt;p&gt;在2014年苹果公布了第一代Apple Watch, 同年11月份又向开发者公开了WatchOS API, 再到2015年正式发布。至今Apple Watch也从 Series 1发展到Series 3了, 而且现在Series 2 官方都已经下架了。
当然, WatchOS 1.0 也已经发展到目前正式版最新的 WatchOS 4.3了, 而且苹果在WWDC上已经公布了WatchOS 5。
所以, WatchOS也已经很稳定了。很多的iOS App都开发出了对应的Watch App, 所以对于众多iOS开发者来说又多了一份学习和挑战的机会。&lt;/p&gt;

&lt;h2 id=&quot;watch-app在项目中的结构&quot;&gt;Watch App在项目中的结构&lt;/h2&gt;

&lt;p&gt;在一个标准的Watch App的项目中, 工程目录至少会有下面这三个:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-1/20180705145146564.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;在目录中的三个主要的文件夹对应的分别是iOS App, Watch App和 WatchKit Extension。而且它们将会生成各自的可执行文件, 打包在iOS应用程序包中。它们之间是具有依赖关系的, 后者依赖于前者。&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-1/20180705145741998.png&quot; width=&quot;65%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;这张图片更是说明了iOS App和 Watch App在项目中的 Target结构, 恰恰也能说明可执行文件iOS App, Watch App和 WatchKit Extension的依赖关系。&lt;/p&gt;

&lt;h2 id=&quot;watch-app架构&quot;&gt;Watch App架构&lt;/h2&gt;

&lt;p&gt;从上面可以了解到一部分Watch App的架构, 从WatchOS 2.0以来详细的架构组成就如下图:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-1/20180705151014898.png&quot; width=&quot;65%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;Watch App是由 Watch App和 WatchKit Extension两个 bundle组成的, 且Watch App包含了 Storyboard和一些资源文件, Watch Extension包含了 Watch App的代码和另外的一些资源文件。另外, 还可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchConnectivity框架&lt;/code&gt;在 iOS和 WatchOS之间进行通信。&lt;/p&gt;

&lt;p&gt;这个图中能很清晰的看到 Watch App的架构以及 Watch App与 iOS App间运行时的关系, 但不要与其在项目中的关系混淆。&lt;/p&gt;

&lt;h2 id=&quot;watch-app的生命周期&quot;&gt;Watch App的生命周期&lt;/h2&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-1/20180705153301127.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;此图说明了 Watch App从启动开始的状态变化, 以及&lt;code class=&quot;highlighter-rouge&quot;&gt;WKExtensionDelegate&lt;/code&gt;中对应的状态变化的协议方法, 当然这与 iOS中 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppDelegate&lt;/code&gt;的协议方法是类似的。
A: &lt;code class=&quot;highlighter-rouge&quot;&gt;applicationDidFinishLaunching&lt;/code&gt;方法被调用。
B: &lt;code class=&quot;highlighter-rouge&quot;&gt;applicationDidBecomeActive&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationWillResignActive&lt;/code&gt;方法被调用。
C: &lt;code class=&quot;highlighter-rouge&quot;&gt;applicationWillEnterForeground&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;applicationDidEnterBackground&lt;/code&gt;方法被调用。&lt;/p&gt;

&lt;h2 id=&quot;wkinterfacecontroller的生命周期&quot;&gt;WKInterfaceController的生命周期&lt;/h2&gt;

&lt;p&gt;首先引入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WatchKit框架&lt;/code&gt;下的主要类: &lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;。如果你不明白, 你可以把它想作做 iOS中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;, 这样就很好理解了。&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;的生命周期也与&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;的生命周期类似。&lt;/p&gt;

&lt;h3 id=&quot;wkinterfacecontroller的加载&quot;&gt;WKInterfaceController的加载&lt;/h3&gt;

&lt;p&gt;先来看下 Watch App的启动过程中是如何加载一个&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;的:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-1/20180705155804838.png&quot; width=&quot;80%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;这里涉及到三个&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;的方法, 其中&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;awakeWithContext:&lt;/code&gt;方法是用来加载页面所必须的数据和初始化页面配置的。 而不要在&lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;方法中去初始化页面配置, 但它可以做一些页面更新的事情。&lt;/p&gt;

&lt;h3 id=&quot;wkinterfacecontroller的完整生命周期&quot;&gt;WKInterfaceController的完整生命周期&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WKInterfaceController&lt;/code&gt;的完整生命周期如下:&lt;/p&gt;

&lt;center&gt;
	&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/watchcourse-1/20180705162239464.png&quot; width=&quot;80%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;只有在用户与 Apple Watch上的应用程序进行交互时，WatchKit Extension才会继续运行。当用户明确退出应用程序或停止与Apple Watch交互时，iOS将使控制器失活并暂停执行 WatchKit Extension。因此界面控制器应该是轻量级的，永远不会执行长时间运行的任务。&lt;/p&gt;

&lt;h3 id=&quot;wkinterfacecontroller的生命周期方法&quot;&gt;WKInterfaceController的生命周期方法&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;awakeWithContext&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;方法在上面说过了, 还有三个方法:
&lt;code class=&quot;highlighter-rouge&quot;&gt;didAppear&lt;/code&gt;: 当前页面已经显示出来时被调用。
&lt;code class=&quot;highlighter-rouge&quot;&gt;willDisappear&lt;/code&gt;: 当前页面将要消失时被调用。
&lt;code class=&quot;highlighter-rouge&quot;&gt;didDeactivate&lt;/code&gt;: 这个方法与&lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;是相反的, 它在失活的情况才会被调用。它需要注意的是, 当此方法被调用时Controller已经失活了, 且不在安全了, 所以不要再进行页面上的更新等操作了。但它负责一些像&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;停用之类的处理是最合适不过了。&lt;/p&gt;

&lt;h4 id=&quot;willactivate和diddeactivate&quot;&gt;willActivate和didDeactivate&lt;/h4&gt;

&lt;p&gt;先举例说明下完整声明周期, 当你进入一个页面时, 设备会经历&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awakeWithContext&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;didAppear&lt;/code&gt;。当你退出当前页面时, 设备会经历&lt;code class=&quot;highlighter-rouge&quot;&gt;willDisappear&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;didDeactivate&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;deinit&lt;/code&gt;。这个过程很容易让我们联想到&lt;code class=&quot;highlighter-rouge&quot;&gt;UIViewController&lt;/code&gt;的声明周期。&lt;/p&gt;

&lt;p&gt;所以你可以把&lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;看作iOS中的&lt;code class=&quot;highlighter-rouge&quot;&gt;willAppear&lt;/code&gt;, 把&lt;code class=&quot;highlighter-rouge&quot;&gt;didDeactivate&lt;/code&gt;看作&lt;code class=&quot;highlighter-rouge&quot;&gt;didDisappear&lt;/code&gt;。但要理解它们本质上的区别, &lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;didDeactivate&lt;/code&gt;只是在激活和失活时触发, 与页面显示其实本质上本无关系。&lt;/p&gt;

&lt;p&gt;再举个例子, 当你进入一个页面时, 设备会经历&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;awakeWithContext&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;didAppear&lt;/code&gt;。然后停止所有用户交互使其进入失活状态, 设备会经历&lt;code class=&quot;highlighter-rouge&quot;&gt;didDeactivate&lt;/code&gt;。直到你再次与其交互, 设备会经历&lt;code class=&quot;highlighter-rouge&quot;&gt;willActivate&lt;/code&gt;。所以, 这才是它们本质的区别。&lt;/p&gt;

&lt;h2 id=&quot;与-ios的技术共性&quot;&gt;与 iOS的技术共性&lt;/h2&gt;

&lt;p&gt;WatchOS可以访问 iOS应用程序中的许多相同技术。除了上面介绍过的共性外, 还有&lt;code class=&quot;highlighter-rouge&quot;&gt;UserDefault&lt;/code&gt;, keychain的存储, &lt;code class=&quot;highlighter-rouge&quot;&gt;OpenURL:&lt;/code&gt; 等等。但是，即使有技术可用，也可能无法以与 iPhone相同的方式使用它。以下是决定何时以及如何使用特定技术的一些指导原则：
1.在 Watch App中想使用的一些功能需要授权的话, 必须在 iPhone上进行授权许可, 这样才能在 WatchKit Extension中使用这些技术。比如, Health, Core Location等等。所以这些隐私许可的设置只需要添加在iOS App的 info.plist中就可以了。
2.不要使用后台执行模式的技术。一般的, Watch App可以视为前台应用程序, 它只在某个InterfaceController与用户交互时运行。所以 WatchKit Extension无法利用大多数后台执行模式来执行任务。但是, 有一些例外：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;① 使用NSURLSession对象启动基于网络的数据传输。&lt;/li&gt;
  &lt;li&gt;② 使用WKAudioFilePlayer类或WKAudioFileQueuePlayer类在后台播放音频文件。&lt;/li&gt;
  &lt;li&gt;③ 使用HKWorkoutSession对象来开始和停止锻炼。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.避免长时间运行的任务。由于与 Watch App的交互通常很简短, 因此在长时间运行的任务完成之前, 可能会暂停 WatchKit Extension。
4.执行任何长时间运行任务的最佳解决方案是在 iOS App中执行该任务。例如, 不是在WatchKit Extension中启动位置服务, 而是在 iOS App中启动它并将更新信息发送到的 WatchKit Extension。&lt;/p&gt;

&lt;p&gt;其实, 很多功能和方法, WatchOS和 iOS是有共性的。 就像当时你在学&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;时会以OC代码为参考一样, 你也可以在 WatchOS中寻找与 iOS类似的功能和方法。&lt;/p&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80&quot;&gt;WatchOS开发教程之一: Watch App架构及生命周期&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8C&quot;&gt;WatchOS开发教程之二: 布局适配和系统Icon设计尺寸&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%89&quot;&gt;WatchOS开发教程之三: 导航方式和控件详解&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%9B%9B&quot;&gt;WatchOS开发教程之四: Watch与 iPhone的通信和数据共享&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%94&quot;&gt;WatchOS开发教程之五: 通知功能开发&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E5%85%AD&quot;&gt;WatchOS开发教程之六: 表盘功能开发&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/wangyanchang21/Watch-App-Sampler&quot;&gt;WatchOS 开发教程源码：Watch-App-Sampler&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/WatchKitProgrammingGuide/index.html#//apple_ref/doc/uid/TP40014969-CH8-SW1&quot;&gt;Developing for Apple Watch&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 06 Jul 2018 01:48:50 +0800</pubDate>
        <link>http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/WatchOS%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B%E4%B9%8B%E4%B8%80/</guid>
        
        <category>watchOS</category>
        
        
        <category>watchOS</category>
        
      </item>
    
      <item>
        <title>高效 OC开发之系统框架</title>
        <description>&lt;p&gt;系统框架，集合遍历，NSCache，+load和+initialize等。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#-熟悉系统框架&quot;&gt;㊼ 熟悉系统框架&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-多用块枚举少用for循环&quot;&gt;㊽ 多用块枚举，少用for循环&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-对自定义其内存管理语义的collection使用无缝桥接&quot;&gt;㊾ 对自定义其内存管理语义的collection使用无缝桥接&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-构建缓存时选用nscache而非nsdictionary&quot;&gt;㊿ 构建缓存时选用NSCache而非NSDictionary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-精简initialize与load的实现代码&quot;&gt;⑤① 精简initialize与load的实现代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-别忘了nstimer会持有其目标对象&quot;&gt;⑤② 别忘了NSTimer会持有其目标对象&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-熟悉系统框架&quot;&gt;㊼ 熟悉系统框架&lt;/h2&gt;

&lt;p&gt;将一系列代码封装为&lt;code class=&quot;highlighter-rouge&quot;&gt;动态库&lt;/code&gt;(dynamic library)，并在其中放入描述其接口的头文件，这样做出来的东西就叫框架。有时为iOS平台构建的第三方框架所使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;静态库&lt;/code&gt;(static library)，这是因为iOS应用程序不允许在其中包含动态库。这些东西严格来讲并不是真正的框架，然而也经常视为框架。不过，所有iOS平台的系统框架仍然使用动态库。&lt;/p&gt;

&lt;p&gt;在为&lt;code class=&quot;highlighter-rouge&quot;&gt;MacOS&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;系统开发带图形界面的应用程序时，会用到名为&lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa框架&lt;/code&gt;，在iOS上成为&lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa Touch&lt;/code&gt;。其实&lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa&lt;/code&gt;本身并不是框架，但是里面继承了一批创建应用程序时经常会用到的框架。&lt;/p&gt;

&lt;p&gt;Objective-C编程时会经常需要使用底层的C语言级API。用C语言来实现API的好处是，可以绕过Objective-C的运行期系统，从而提升执行速度。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation框架&lt;/code&gt;提供了基础核心功能, 除了&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt;之外，还有很多系统库: &lt;br /&gt;
1.&lt;code class=&quot;highlighter-rouge&quot;&gt;CFNetwork&lt;/code&gt;此框架提供了C语言级别的网络通信能力，它将&lt;code class=&quot;highlighter-rouge&quot;&gt;BSD套接字&lt;/code&gt;(BSD socket)抽象成易于使用的网络接口。 &lt;br /&gt;
2.&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreAudio&lt;/code&gt; 该框架所提供的C语言API可用来操作设备上的音频文件。 &lt;br /&gt;
3.&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreData&lt;/code&gt; 此框架所提供的Objective-C接口可将对象放入数据库，便于持久保存。 &lt;br /&gt;
4.&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreText&lt;/code&gt; 此框架提供的C语言接口可以高效执行文字排版及渲染操作。 &lt;br /&gt;
5.&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreGraphics&lt;/code&gt;框架是用C语言写成的，其中提供了2D渲染所必备的数据结构与函数。 &lt;br /&gt;
6.&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreAnimation&lt;/code&gt;是用Objective-C语言写成的，它提供了一些工具，而UI框架则用这些工具来渲染图形并播放动画。&lt;/p&gt;

&lt;p&gt;还有许多其他的框架, 如&lt;code class=&quot;highlighter-rouge&quot;&gt;MapKit框架&lt;/code&gt;，它为iOS程序提供地图功能。又比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Social框架&lt;/code&gt;，它为&lt;code class=&quot;highlighter-rouge&quot;&gt;MacOS&lt;/code&gt;及iOS程序提供了社交网络功能。更多可以了解一下: &lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/51028697#t11&quot;&gt;Cocoa Touch框架&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.许多系统框架都可以直接使用。其中最重要的是&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt;，这两个框架提供了构建应用程序所需的许多核心功能。
很多常见任务都能用框架来做，例如音频与视频处理、网络通信、数据管理等。&lt;/li&gt;
  &lt;li&gt;2.请记住：用纯C写成的框架与用Objective-C写成的一样重要，若想要成为优秀的Objective-C开发者，应该掌握C语言的核心概念&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-多用块枚举少用for循环&quot;&gt;㊽ 多用块枚举，少用for循环&lt;/h2&gt;

&lt;p&gt;在OC里面循环的语句有, &lt;code class=&quot;highlighter-rouge&quot;&gt;while循环&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;for-in快速遍历&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSEnumerator遍历&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;基于块的枚举遍历&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSEnumerator&lt;/code&gt;是个抽象基类，其中只定义了两个方法，供其具体子类来实现：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allObjects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nullable&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObjectType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每次调用该方法时，其内部数据结构都会更新。等到枚举中的全部对象都已返回之后，再调用就将返回nil，这表示达到枚举末端了。&lt;/p&gt;

&lt;p&gt;NSEnumerator遍历方式:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kt&quot;&gt;NSArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NSEnumerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enumerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1,2,3,4,5&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NSEnumerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enumerator2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reverseObjectEnumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 5,4,3,2,1&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enumerator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Do something with 'object'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;基于块的枚举遍历:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enumerateObjectsUsingBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NS_NOESCAPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ObjectType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;enumerateObjectsWithOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSEnumerationOptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;usingBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSUInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此方式的优势：遍历时可以直接从&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;里获取更多信息。在遍历数组时，可以知道当前所针对的下标。遍历有序set(NSOrderedSet)时也一样。而在遍历字典时，无须额外编码，即可同事获取键与值。另外一个好处是，能够修改&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;的方法名，以免进行类型转换的操作，从效果上讲，相当于把本来需要执行的类型转换操作交给&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;方法签名来做。此方法还可以通过设定&lt;code class=&quot;highlighter-rouge&quot;&gt;stop变量&lt;/code&gt;值来实现终止遍历的操作。&lt;/p&gt;

&lt;p&gt;第一个方法是基本的遍历方法, 第二方法还可以执行反向遍历, 并发遍历。&lt;/p&gt;

&lt;h3 id=&quot;总结-1&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.遍历collection有四种方式。最基本的办法是&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;，其次是&lt;code class=&quot;highlighter-rouge&quot;&gt;NSEnumerator遍历法&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;快速遍历法&lt;/code&gt;，最新、最先进的方式则是&lt;code class=&quot;highlighter-rouge&quot;&gt;块枚举法&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;2.&lt;code class=&quot;highlighter-rouge&quot;&gt;块枚举法&lt;/code&gt;本身就能通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;来并发执行遍历操作，无须另行编写代码。而采用其他遍历方式则无法轻易实现这一点。&lt;/li&gt;
  &lt;li&gt;3.若提前知道待遍历的collection含有何种对象，则应修改块签名，指出对象的具体类型。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-对自定义其内存管理语义的collection使用无缝桥接&quot;&gt;㊾ 对自定义其内存管理语义的collection使用无缝桥接&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;无缝桥接&lt;/code&gt;技术，可以在定义于&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation框架&lt;/code&gt;中的Objective-C类和定义与&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation框架&lt;/code&gt;中的C数据结构之间互相转换。笔者将C语言级别的API称为数据结构, 而没有称其为类或对象, 这是因为它们与Objective-C中的类或对象并不相同。&lt;/p&gt;

&lt;p&gt;转换中的&lt;code class=&quot;highlighter-rouge&quot;&gt;__bridge&lt;/code&gt;告诉&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;如何处理转换所涉及的Objective-C对象。&lt;code class=&quot;highlighter-rouge&quot;&gt;__bridge&lt;/code&gt;表示&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;仍然具备这个Objective-C对象的所有权。而&lt;code class=&quot;highlighter-rouge&quot;&gt;__bridge_retained&lt;/code&gt;意味着&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;将交出对象的所有权。与之相似，反向转换可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;__bridge_transfer&lt;/code&gt;来实现。这三种转换方式成为&lt;code class=&quot;highlighter-rouge&quot;&gt;桥式转换&lt;/code&gt;(bridged cast)。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation框架&lt;/code&gt;中的Objective-C类所具备的某些功能，是&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation框架&lt;/code&gt;中的C语言数据结构所不具备的，反之亦然。在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation框架&lt;/code&gt;中的字典对象时会遇到一个大问题，那就是其键的内存管理语义为&lt;code class=&quot;highlighter-rouge&quot;&gt;拷贝&lt;/code&gt;，而值的语义却是&lt;code class=&quot;highlighter-rouge&quot;&gt;保留&lt;/code&gt;。除非使用强大的无缝桥接技术，否则无法改变其语义。&lt;/p&gt;

&lt;p&gt;创建&lt;code class=&quot;highlighter-rouge&quot;&gt;CFMutableDictionary&lt;/code&gt;时，可以通过下列方法来指定键和值的内存管理语义：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;CFDictionaryRef&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDictionaryCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CFAllocatorRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;CFIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numValues&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDictionaryKeyCallBacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyCallBacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFDictionaryValueCallBacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueCallBacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面的代码演示了这种字典的创建步骤：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;CoreFoundation/CoreFoundation.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EOCRetainCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CFAllocatorRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EOCReleaseCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CFAllocatorRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CFDictionaryKeyCallBacks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;EOCRetainCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;EOCReleaseCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CFEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CFHash&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CFDictionaryValueCallBacks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valueCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;EOCRetainCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;EOCReleaseCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;CFEqual&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;CFMutableDictionaryRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aCFDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;CFDictionaryCreateMutable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keyCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valueCallbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
&lt;span class=&quot;kt&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anNSDictinary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge_transfer&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSMutableDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aCFDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;总结-2&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.通过无缝桥接技术，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation框架&lt;/code&gt;中的Objective-C对象与&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation框架&lt;/code&gt;中的C语言数据结构之间来回转换。&lt;/li&gt;
  &lt;li&gt;2.在&lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation&lt;/code&gt;层面创建collection时，可以指定许多回调函数，这些函数表示此collection应如何处理器元素。然后，可运用无缝桥接技术，将其转换成具备特殊内存管理语义的Objective-C collection。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-构建缓存时选用nscache而非nsdictionary&quot;&gt;㊿ 构建缓存时选用NSCache而非NSDictionary&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation框架&lt;/code&gt;专为处理缓存任务而设计的。&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;胜过&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;之处在于，当系统资源将要耗尽时，它可以自动删减缓存。此外，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;还会先行删减&lt;code class=&quot;highlighter-rouge&quot;&gt;最久未使用的&lt;/code&gt;对象。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;并不会&lt;code class=&quot;highlighter-rouge&quot;&gt;拷贝&lt;/code&gt;键，而是会&lt;code class=&quot;highlighter-rouge&quot;&gt;保留&lt;/code&gt;它。很多时候，键都是由不支持拷贝操作的对象来充当的。因此，&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;不会自动拷贝键，所以说，在键不支持拷贝操作的情况下，该类用起来比字典更方便。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;是线程安全的。而&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;则绝对不具备此优势，在开发者自己不编写加锁代码的前提下，多个线程便可以同时访问&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;开发者可以操控缓存删减其内容的时机。有两个与系统资源相关的尺度可供调整，其一是缓存中的对象总数，其二是所有对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;总开销&lt;/code&gt;。当对象总数或总开销超过上限时，缓存就可能会删减其中的对象了，在可用的系统资源趋于紧张时，也会这么做。&lt;/p&gt;

&lt;p&gt;下面演示了缓存的用法：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSCache&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//Cache a maximum of 100 URLs&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countLimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//The size in bytes of data is used as the cost&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalCostLimit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5*1025*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//5MB&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downloadDataForURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;objectForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Cache hit&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Cache miss&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;EOCNetworkFetcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EOCNetworkFetcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetcher&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startWithCompletionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还有个类叫&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;搭配起来用，效果很好，此类事&lt;code class=&quot;highlighter-rouge&quot;&gt;NSMutableData&lt;/code&gt;的子类，而且实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDiscardableContent协议&lt;/code&gt;。当系统资源紧张时，可以把保存&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt;对象的那块内存释放掉。&lt;/p&gt;

&lt;p&gt;如果需要访问某个&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt;对象，可以调用其&lt;code class=&quot;highlighter-rouge&quot;&gt;beginContentAccess&lt;/code&gt;方法，告诉它现在还不应丢弃自己所占的内存。用完之后，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;endContentAccess&lt;/code&gt;方法，告诉它在必要时可以丢弃自己所占的内存了。&lt;/p&gt;

&lt;p&gt;刚才那个例子可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt;改写如下：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;downloadDataForURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NSPurgeableData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;objectForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Stop the data being purged&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beginContentAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//Use the cached data&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;//Mark that the data may be purged again&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cachedData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endContentAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Cache miss&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;EOCNetworkFetcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EOCNetworkFetcher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;initWithURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetcher&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;startWithCompletionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;NSPurgeableData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purgeableData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSPurgeableData&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dataWithData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cache&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;setObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purgeableData&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            
            &lt;span class=&quot;c1&quot;&gt;//Don't need to beginContentAccess as it begins&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//with access already marked&lt;/span&gt;
            
            &lt;span class=&quot;c1&quot;&gt;//Use the retrieved data&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;useData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            
            &lt;span class=&quot;c1&quot;&gt;//Mark that the data may be purged now&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;purgeableData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endContentAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;总结-3&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.实现缓存时应选用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;而非&lt;code class=&quot;highlighter-rouge&quot;&gt;NSDictionary&lt;/code&gt;对象。因为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;可以提供优雅的自动删减功能，而且是&lt;code class=&quot;highlighter-rouge&quot;&gt;线程安全的&lt;/code&gt;，此外，它与字典不同，并不会拷贝键。&lt;/li&gt;
  &lt;li&gt;2.可以给&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;对象设置上限，用以限制缓存中的对象总个数及&lt;code class=&quot;highlighter-rouge&quot;&gt;总成本&lt;/code&gt;，而这些尺度则定义了缓存删减其中对象的时机。但是绝对不要把这些尺度当成可靠的&lt;code class=&quot;highlighter-rouge&quot;&gt;硬限制&lt;/code&gt;(hard limit)，它们仅对&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;起指导作用。&lt;/li&gt;
  &lt;li&gt;3.将&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt;于&lt;code class=&quot;highlighter-rouge&quot;&gt;NSCache&lt;/code&gt;搭配使用，可实现自动清除数据的功能，也就是说，当&lt;code class=&quot;highlighter-rouge&quot;&gt;NSPurgeableData&lt;/code&gt;对象所占内存为系统所丢弃时，该对象自身也会从缓存中移除。&lt;/li&gt;
  &lt;li&gt;4.如果缓存使用得当，那么应用程序的响应速度就能提高。只有那种&lt;code class=&quot;highlighter-rouge&quot;&gt;重新计算起来很费事的&lt;/code&gt;数据，才值得放入缓存，比如那些需要从网络获取或从磁盘读取的数据。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-精简initialize与load的实现代码&quot;&gt;⑤① 精简initialize与load的实现代码&lt;/h2&gt;

&lt;h3 id=&quot;-load&quot;&gt;+ load;&lt;/h3&gt;

&lt;p&gt;对于加入运行期系统中的每个类及分类来说，必定会调用此方法，而且仅调用一次。当包含类或分类的程序库载入系统时，就会执行此方法，而这通常就是指应用程序启动的时候，若程序是为iOS平台设计的，则肯定会在此时执行。如果类和其分类中都定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;，则先调用类里的，再调用分类里的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;的运行环境还是相对比较危险的, 因为运行期的系统可能还不完整。而且无法判断出其中各个类的载入顺序, 所以在&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;中使用其他类是不安全的。&lt;/p&gt;

&lt;p&gt;在执行子类的&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;之前，必定会先执行所有超类的&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;，所以在&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;里不用写[super load]。而如果代码还依赖了其他程序库，那么程序库里相关类的&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;也必定会先执行。&lt;/p&gt;

&lt;p&gt;有个重要的事情需注意，那就是&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;并不像普通的方法那样，它并不遵从那套继承规则，如果某个类本身没实现&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;，那么不管其各级超类是否实现此方法，系统都不会调用。&lt;/p&gt;

&lt;p&gt;而且load方法务必实现得精简一些，也就是要尽量减少其所执行的操作，因为整个应用程序在执行&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;时都会阻塞。&lt;/p&gt;

&lt;h3 id=&quot;-initialize&quot;&gt;+ initialize;&lt;/h3&gt;

&lt;p&gt;对于每个类来说，该方法会在程序首次用该类之前调用，类似于懒加载的方式，且只调用一次。它是由运行期系统来调用的，绝不应该通过代码直接调用。&lt;/p&gt;

&lt;p&gt;从运行期系统完整度上来讲，此时可以安全使用并调用任意类中的任意方法。而且运行期系统也能保证&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize方法&lt;/code&gt;一定会在&lt;code class=&quot;highlighter-rouge&quot;&gt;线程安全的环境&lt;/code&gt;中执行。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize方法&lt;/code&gt;与其他方法(load除外)一样，也遵循通常的继承规则。如果某个类未实现它，而其超类实现了，那么就会运行超类的实现代码。如果超类要保护自己不要多次运行，可以按照以下方式构建您的实现：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ClassName&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ... do the initialization ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize方法&lt;/code&gt;只应该用来设置内部数据。不应该在其中调用其他方法, 即便是本类自己的方法, 也最好别调用。若某个全局状态无法在编译期初始化, 则可以放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;里来做。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法中尽量精简代码，在里面设置一些状态，使本类能够正常运作就可以了，不要执行那种耗时太久或需要加锁的任务。&lt;/p&gt;

&lt;p&gt;之前也曾写过一篇关于&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法比较的博客: &lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/77483749&quot;&gt;NSObject的load和initialize方法比较&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;总结-4&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.在加载阶段，如果类实现了&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;，那么系统就会调用它。分类里也可以定义此方法，类的&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;要比分类中的先调用。与其他方法不同，&lt;code class=&quot;highlighter-rouge&quot;&gt;load方法&lt;/code&gt;不参与覆写机制。&lt;/li&gt;
  &lt;li&gt;2.首次使用某个类之前，系统会向其发送&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;消息。由于此方法遵从普通的覆写规则，所以通常应该在里面判断当前要初始化的是哪个类。&lt;/li&gt;
  &lt;li&gt;3.&lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法都应该实现得精简一些，这有助于保持应用程序的响应能力，也能减少引入&lt;code class=&quot;highlighter-rouge&quot;&gt;依赖环&lt;/code&gt;(interdependency cycle)的几率。&lt;/li&gt;
  &lt;li&gt;4.无法在编译器设定的全局变量，可以放在&lt;code class=&quot;highlighter-rouge&quot;&gt;initialize&lt;/code&gt;方法里初始化。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-别忘了nstimer会持有其目标对象&quot;&gt;⑤② 别忘了NSTimer会持有其目标对象&lt;/h2&gt;

&lt;p&gt;计时器要和 &lt;code class=&quot;highlighter-rouge&quot;&gt;运行循环&lt;/code&gt;(run loop)相关联，运行循环到时候会触发任务。创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt; 时，可以将其&lt;code class=&quot;highlighter-rouge&quot;&gt;预先安排&lt;/code&gt;在当前的运行循环中，也可以先创建好，然后由开发者自己来调度。无论采用哪种方式，只有把计时器放在运行循环里，它才能正常触发任务。&lt;/p&gt;

&lt;p&gt;创建计时器的时候，由于目标对象是 self ，所以要保留此实例。然而，因为计时器是用实例变量存放的，所以实例也保留了计时器。于是，就产生了 &lt;code class=&quot;highlighter-rouge&quot;&gt;保留环&lt;/code&gt;，如果此环能在某一时刻打破，那就不会出什么问题。然而要想打破保留环，只能将计时器置为nil或使计时器无效。&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/effectiveoc-7/20180524154317173.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;但还有种比较巧妙的化解方案:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EOCBlocksSupport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eoc_scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)())&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;@selector(eoc_blockInvoke:)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eoc_blockInvoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　　　&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;　　&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fireCounting&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;__weak&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EOCClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;_pollTimer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSTimer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eoc_scheduledTimerWithTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;EOCClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strongSelf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weakSelf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strongSelf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;repeats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上面这个方法不用手动进行对timer的干预从而做到避开循环引用的问题, 原理就是&lt;code class=&quot;highlighter-rouge&quot;&gt;weak化&lt;/code&gt;。&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/effectiveoc-7/20180524160353342.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;h3 id=&quot;总结-5&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;对象会保留其目标，直到计时器本身失效为止，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;invalidate方法&lt;/code&gt;可令计时器失效，另外，一次性的计时器在触发完任务之后也会失效。&lt;/li&gt;
  &lt;li&gt;2.反复执行任务的计时器，很容易引入保留环，如果这种计时器的目标对象又保留了计时器本身，那肯定会导致保留环。这种环状保留关系，可能是直接发生的，也可能是通过对象图里的其他对象间接发生的。&lt;/li&gt;
  &lt;li&gt;3.可以扩充&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;的功能，用&lt;code class=&quot;highlighter-rouge&quot;&gt;块&lt;/code&gt;来打破保留环。不过，除非&lt;code class=&quot;highlighter-rouge&quot;&gt;NSTimer&lt;/code&gt;将来在公共接口里提供此功能，否则必须创建分类，将相关实现代码加入其中。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2017/Effective-OC%E4%B9%8B%E4%B8%80&quot;&gt;高效 OC开发之熟悉Objective-C&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2017/Effective-OC%E4%B9%8B%E4%BA%8C&quot;&gt;高效 OC开发之对象、消息、运行时&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2017/Effective-OC%E4%B9%8B%E4%B8%89&quot;&gt;高效 OC开发之接口与API设计&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E5%9B%9B&quot;&gt;高效 OC开发之协议与分类&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E4%BA%94&quot;&gt;高效 OC开发之内存管理&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E5%85%AD&quot;&gt;高效 OC开发之Block和GCD&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E4%B8%83&quot;&gt;高效 OC开发之系统框架&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 25 May 2018 00:08:16 +0800</pubDate>
        <link>http://localhost:4000/2018/Effective-OC%E4%B9%8B%E4%B8%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/Effective-OC%E4%B9%8B%E4%B8%83/</guid>
        
        <category>iOS</category>
        
        <category>Effective OC</category>
        
        
        <category>iOS</category>
        
        <category>Effective OC</category>
        
      </item>
    
      <item>
        <title>高效 OC开发之Block和GCD</title>
        <description>&lt;p&gt;block, GCD，NSOperationQueue等实现多线程。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/contact-wangyanchang21-green.svg&quot; alt=&quot;Contact&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#-理解块的概念&quot;&gt;㊲ 理解”块”的概念&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-为常用的块类型创建-typedef&quot;&gt;㊳ 为常用的块类型创建 typedef&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-用handler块降低代码分散程度&quot;&gt;㊴ 用handler块降低代码分散程度&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-用块引用其所属对象时不要出现保留环&quot;&gt;㊵ 用块引用其所属对象时不要出现保留环&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-多用派发队列-少用同步锁&quot;&gt;㊶ 多用派发队列, 少用同步锁&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-多用gcd-少用performselector系列方法&quot;&gt;㊷ 多用GCD,少用performSelector系列方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-掌握gcd及操作队列的使用时机&quot;&gt;㊸ 掌握GCD及操作队列的使用时机&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-通过dispatch-group机制-根据系统资源状况来执行任务&quot;&gt;㊹ 通过Dispatch Group机制,根据系统资源状况来执行任务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-使用dispatch_once来执行只需执行一次的线程安全代码&quot;&gt;㊺ 使用dispatch_once来执行只需执行一次的线程安全代码&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#-不要使用dispatch_get_current_queue&quot;&gt;㊻ 不要使用dispatch_get_current_queue&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#相关资料&quot;&gt;相关资料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-理解块的概念&quot;&gt;㊲ 理解”块”的概念&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;和函数类似, 只不过是直接定义在另一个函数里的, 和定义它的那个函数共享同一个范围内的东西。&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;可以实现闭包, 有些人也称它作块。而且, iOS多线程的核心就是&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;(Grand Central Dispatch)。&lt;/p&gt;

&lt;h3 id=&quot;__block&quot;&gt;__block&lt;/h3&gt;

&lt;p&gt;在默认情况下, &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;捕获的变量是不可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;内部进行修改的。若想修改捕获的变量需要加&lt;code class=&quot;highlighter-rouge&quot;&gt;__block&lt;/code&gt;进行修饰。&lt;/p&gt;

&lt;h3 id=&quot;block类型&quot;&gt;block类型&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;其实会按照存储位置进行分类, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;MRC&lt;/code&gt;中, 可能有三种&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;, 就是全局块, 栈块和堆块。 但是在&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;中, 只有两种&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;了, 就是全局块和堆块了。由于&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;已经能很好地处理对象的生命周期的管理, 所以都放到堆上管理, 不在使用栈块管理了, 所以就没有栈块的。&lt;/p&gt;

&lt;p&gt;但是有一种例外情况，就是所创建的&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;没有被外部指针所持有的时候，编译器就不会做出将其拷贝的堆区的操作。所以这种情况下，是存在&lt;code class=&quot;highlighter-rouge&quot;&gt;栈块&lt;/code&gt;的。&lt;/p&gt;

&lt;h3 id=&quot;block-的内部结构和作用&quot;&gt;block 的内部结构和作用&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;是个什么东西呢, 对象? 结构体? 让我们来看一下&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;的内部结构:&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/effectiveoc-6/20180312115212317.png&quot; width=&quot;70%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Block_layout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Block_descriptor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// imported variables&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Block_descriptor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;通过上面的结构, 可以看出一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt; 实例的构成实际上有6个部分：&lt;br /&gt;
1.&lt;code class=&quot;highlighter-rouge&quot;&gt;isa指针&lt;/code&gt;: 所有对象都有该指针，用于实现对象相关的功能。 &lt;br /&gt;
2.&lt;code class=&quot;highlighter-rouge&quot;&gt;flags&lt;/code&gt;: 附加标识位, 在&lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;dispose&lt;/code&gt;等情况下可以用到。 &lt;br /&gt;
3.&lt;code class=&quot;highlighter-rouge&quot;&gt;reserved&lt;/code&gt;:保留变量。 &lt;br /&gt;
4.&lt;code class=&quot;highlighter-rouge&quot;&gt;invoke&lt;/code&gt;: 函数指针，指向 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;的实现代码, 也可以说是函数调用地址。 &lt;br /&gt;
5.&lt;code class=&quot;highlighter-rouge&quot;&gt;descriptor&lt;/code&gt;:  表示该 &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;的附加描述信息，主要是 &lt;code class=&quot;highlighter-rouge&quot;&gt;size&lt;/code&gt;，以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;copy&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;dispose&lt;/code&gt;函数的指针。这两个辅助函数在拷贝及丢弃块对象时运行, 其中会执行一些操作, 比方说, 前者要保留捕获的对象,而后者则将之释放。 &lt;br /&gt;
6.&lt;code class=&quot;highlighter-rouge&quot;&gt;variables&lt;/code&gt;: 捕获的变量，&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;能够访问它外部的局部变量，就是因为将这些变量复制到了结构体中。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;的结构体中是有isa指针的, 它还有引用计数, 而且还能响应选择子, 所以可视为对象。这里就不详述了, 因为之前也写过了关于&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;的博客: &lt;a href=&quot;https://wangyanchang21.github.io/2018/%E6%B5%85%E8%B0%88block%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%8F%8A%E5%86%85%E5%AD%98%E7%89%B9%E6%80%A7%E4%B9%8B%E4%B8%80&quot;&gt;浅谈block实现原理及内存特性&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.块是C、C++、 Objective-C中的词法闭包。&lt;/li&gt;
  &lt;li&gt;2.块可接受参数, 也可返回值。&lt;/li&gt;
  &lt;li&gt;3.块可以分配在栈或堆上,也可以是全局的。分配在栈上的块可拷贝到堆里, 这样的话, 就和标准的 Objective-C对象一样, 具备引用计数了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-为常用的块类型创建-typedef&quot;&gt;㊳ 为常用的块类型创建 typedef&lt;/h2&gt;

&lt;p&gt;每个块都具备其&lt;code class=&quot;highlighter-rouge&quot;&gt;固有类型&lt;/code&gt;(inherent type), 因而可将其赋给适当类型的变量。
为了隐藏复杂的块类型,需要用到C语言中名为&lt;code class=&quot;highlighter-rouge&quot;&gt;类型定义&lt;/code&gt;(type definition)的特性。typedef关键字用于给类型起个易读的别名。使用类型定义还有个好处,就是当你打算重构块的类型签名时会很方便。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;actionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cardId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最好在使用块类型的类中定义这些 &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt;,而且还应该把这个类的名字加在由 &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt;所定义的新类型名前面,这样可以阐明块的用途。还可以用 &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt;给同一个块签名类型创建数个别名。在&lt;code class=&quot;highlighter-rouge&quot;&gt;Accounts框架&lt;/code&gt;中就有这样的例子:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ACAccountStoreSaveCompletionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ACAccountStoreRemoveCompletionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;BOOL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;总结-1&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.以&lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt;重新定义块类型, 可令块变量用起来更加简单。&lt;/li&gt;
  &lt;li&gt;2.定义新类型时应遵从现有的命名习惯, 勿使其名称与别的类型相冲突。&lt;/li&gt;
  &lt;li&gt;3.不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名, 那么只需修改相应 &lt;code class=&quot;highlighter-rouge&quot;&gt;typed&lt;/code&gt;中的块签名即可, 无须改动其他 &lt;code class=&quot;highlighter-rouge&quot;&gt;typedef&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-用handler块降低代码分散程度&quot;&gt;㊴ 用handler块降低代码分散程度&lt;/h2&gt;

&lt;p&gt;异步方法在执行完任务之后, 需要以某种手段通知相关代码。实现此功能有很多办法。常用的技巧是委托协议(参见第23条), &lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;和通知等方式。常用的代理协议代码的分散度比较高, 且若在当前类中有多个&lt;code class=&quot;highlighter-rouge&quot;&gt;delegate&lt;/code&gt;的话, 还需要在代理回调中进行判断。&lt;/p&gt;

&lt;p&gt;与使用委托模式的代码相比, 用块写出来的代码显然更为整洁。异步任务执行完毕后所需运行的业务逻辑, 和启动异步任务所用的代码放在了一起。而且, 由于块声明在创建获取器的范围里, 所以它可以访问此范围内的全部变量。&lt;/p&gt;

&lt;p&gt;有时候会成功和失败的情况要分别处理, 所以调用此API的代码也就会按照逻辑, 把应又对成功和失败情况的代码分开来写, 这将令代码更易读懂。API格式如下:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;startRequestWithSuccessBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;
					    &lt;span class=&quot;nv&quot;&gt;failureBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而且, 若有需要, 还可以把处理失败情况或成功情况所用的代码省略。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;startRequestWithHandelBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;把成功情况和失败情况放在同一个块中, 有些缺点, 就是由于全部逻辑都写在一起, 所以会令块变得比较长, 且比较复杂。然而只用一个块的写法也有好处, 那就是更为灵活。而且, 在调用API的代码可能会在处理成功响应的过程中发现错误。&lt;/p&gt;

&lt;p&gt;基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt;来设计API还有个原因, 就是某些代码必须运行在特定的线程上。比方说, &lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa&lt;/code&gt;与 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cocoa Touch&lt;/code&gt;中的UI操作必须在主线程上执行。这就相当于&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;主队列&lt;/code&gt;(main queue)。因此, 最好能由调用API的人来决定 &lt;code class=&quot;highlighter-rouge&quot;&gt;handler&lt;/code&gt;应该运行在哪个线程上。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;doSomeThingOnQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSOperationQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;
			   &lt;span class=&quot;nv&quot;&gt;actionBlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;总结-2&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.在创建对象时,可以使用内联的 &lt;code class=&quot;highlighter-rouge&quot;&gt;handler块&lt;/code&gt;将相关业务逻辑一并声明。&lt;/li&gt;
  &lt;li&gt;2.在有多个实例需要监控时, 如果采用委托模式,那么经常需要根据传入的对象来切换, 而若改用 &lt;code class=&quot;highlighter-rouge&quot;&gt;handler块&lt;/code&gt;来实现, 则可直接将块与相关对象放在一起。&lt;/li&gt;
  &lt;li&gt;3.设计API时如果用到了 &lt;code class=&quot;highlighter-rouge&quot;&gt;handler块&lt;/code&gt;, 那么可以增加一个参数, 使调用者可通过此参数来决定应该把块安排在哪个队列上执行。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-用块引用其所属对象时不要出现保留环&quot;&gt;㊵ 用块引用其所属对象时不要出现保留环&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;block&lt;/code&gt;时很容易已发循环引用的问题。中呈环状相互引用的多个对象, 将导致内存泄漏, 因为循环中的对象其保留计数不会降为0。所以, 通常通过&lt;code class=&quot;highlighter-rouge&quot;&gt;弱引用&lt;/code&gt;(weak reference, 参见第33条), 或是从外界命令循环中的某个对象不再保留另外一个对象。从而打破保留环, 避免内存泄漏。&lt;/p&gt;

&lt;h3 id=&quot;总结-3&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.如果块所捕获的对象直接或间接地保留了块本身, 那么就得当心保留环问题。&lt;/li&gt;
  &lt;li&gt;2.一定要找个适当的时机解除保留环, 而不能把责任推给API的调用者。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-多用派发队列-少用同步锁&quot;&gt;㊶ 多用派发队列, 少用同步锁&lt;/h2&gt;

&lt;p&gt;在 Objective-C中, 如果有多个线程要执行同一份代码, 那么有时可能会出问题。这种情况下, 通常要使用锁来实现某种同步机制。&lt;/p&gt;

&lt;h4 id=&quot;锁&quot;&gt;锁&lt;/h4&gt;

&lt;p&gt;1.&lt;code class=&quot;highlighter-rouge&quot;&gt;同步锁&lt;/code&gt;(synchronization block)&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronizationMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@synchronized(self)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Safe Code&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;滥用&lt;code class=&quot;highlighter-rouge&quot;&gt;@synchronized(self)&lt;/code&gt;则会降低代码效率, 因为共用同一个锁的那些同步块,都必须按顺序执行。若是在self对象上频繁加锁, 那么程序可能要等另一段与此无关的代码执行完毕, 才能继续执行当前代码, 这样做其实并没有必要。&lt;/p&gt;

&lt;p&gt;2.&lt;code class=&quot;highlighter-rouge&quot;&gt;NSLock&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synchronizationMethod&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NSLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Safe Code&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这两种方法都很好, 不过也有其缺陷。比方说, 在极端情况下, 同步块会导致死锁, 另外, 其效率也不见得很高, 而如果直接使用锁对象的话, 一旦遇到死锁, 就会非常麻烦。&lt;/p&gt;

&lt;p&gt;3.&lt;code class=&quot;highlighter-rouge&quot;&gt;递归锁&lt;/code&gt;(NSRecursiveLock)&lt;/p&gt;

&lt;p&gt;所有还有一种锁叫递归锁, 将&lt;code class=&quot;highlighter-rouge&quot;&gt;NSLock&lt;/code&gt;改为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSRecursiveLock&lt;/code&gt;后, 线程能够多次持有该锁, 而且不会出现死锁的现象。&lt;/p&gt;

&lt;h4 id=&quot;gcd队列&quot;&gt;GCD队列&lt;/h4&gt;

&lt;p&gt;有种简单而高效的办法可以代替同步块或锁对象, 那就是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;串行同步队列&lt;/code&gt;( serial synchronization queue), 它是一种轻量级的机制。将读取操作及写人操作都安排在同一个队列里, 即可保证数据同步。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;任务派发方式&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dispatch_sync()&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;同步执行，完成了它预定的任务后才返回，阻塞当前线程&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dispatch_async()&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;异步执行，会立即返回，预定的任务会完成但不会等它完成，不阻塞当前线程&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;GCD队列种类&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;获取方法&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;队列类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;说明&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;主队列&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dispatch_get_main_queue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;串行队列&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;主线中执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;全局队列&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dispatch_get_global_queue&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;并发队列&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;子线程中执行&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;用户队列&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;dispatch_queue_create&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;串行/并发&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;子线程中执行&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;队列替换锁的方式, 把数据写入操作与数据读取操作都安排在序列化的队列里执行:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.effetiveobjectivec.syncQueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__block&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dispatch_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;setSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dispatch_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;而且我们还可以进一步优化。数据写入不一定非得是同步的。设置实例变量所用的块，并不需要向设置方法返回什么值。那代码可以改成：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;setSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这只是把同步派发改成了异步派发, 从调用者的角度来看, 这个小改动可以提升设置方法的执行速度, 而读取操作与写入操作依然会按顺序执行。&lt;/p&gt;

&lt;p&gt;但这么改有个问题需要注意: 因为执行异步派发时, 需要拷贝块。若拷贝块所用的时间明显超过执行块所花的时间, 则这种做法将比原来更慢。由于本书所举的这个例子很简单, 所以改完之后很可能会变慢。然而, 若是派发给队列的块要执行更为繁重的任务, 那么仍然可以考虑这种备选方案。&lt;/p&gt;

&lt;p&gt;先引入栅栏(barrier)的概念:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 如果传入自己创建的并行队列时，会阻塞当前队列执行，而不阻塞当前线程。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_barrier_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_block_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 如果传入自己创建的并行队列时，阻塞当前队列的同时也会阻塞当前线程。&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_barrier_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_block_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;再次优化, 使用&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;并发队列和栅栏(barrier):&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.effetiveobjectivec.syncQueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DISPATCH_QUEUE_CONCURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__block&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dispatch_sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;setSomeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;dispatch_barrier_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_syncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_someString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;center&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/effectiveoc-6/20180517160524947.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;在这个并发队列中，读取操作是用普通的块来实现的，而写入操作则是用栅栏块来实现的 读取操作可以并行，但写入操作必须单独执行，因为它是栅栏块。&lt;/p&gt;

&lt;p&gt;所以, 测试一下性能，你就会发现，这种做法肯定比使用串行队列要快。&lt;/p&gt;

&lt;h3 id=&quot;总结-4&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.派发队列可用来表述同步语义(synchronization semantic), 这种做法要比使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@synchronized()&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;NSLock&lt;/code&gt;对象更简单。&lt;/li&gt;
  &lt;li&gt;2.将同步与异步派发结合起来, 可以实现与普通加锁机制一样的同步行为, 而这么做却不会阻塞执行异步派发的线程。&lt;/li&gt;
  &lt;li&gt;3.使用同步队列及栅栏块, 可以令同步行为更加高效。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-多用gcd-少用performselector系列方法&quot;&gt;㊷ 多用GCD, 少用performSelector系列方法&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;系列方法有很多, 都是带有选择子的。这种编程方式极为灵活，经常可用来简化复杂的代码。不管哪种用法，编译器都不知道要执行的选择子是什么，这必须到了运行期才能确定。&lt;/p&gt;

&lt;p&gt;这种方式的确定很明显。编译器并不知道将要调用的选择子是什么，因此也就不了解其方法签名及返回值，甚至连是否有返回值都不清楚。而且，由于编译器不知道方法名，所以就没办法运用&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;的内存管理规则来判定返回值是不是应该释放，鉴于此，&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;采用了比较谨慎的做法，就是不添加释放操作。然而这么做可能导致内存泄漏，因为方法在返回对象时可能已经将其保留了。具体的例子可以阅读我另一篇博客, &lt;a href=&quot;https://blog.csdn.net/wangyanchang21/article/details/79461511#t22&quot;&gt;ARC 不会优化的情景&lt;/a&gt;。
再有, 这些方法的返回值只能是void或者对象类型(id类型), 局限性很大。&lt;/p&gt;

&lt;p&gt;再举个例子, &lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;还有如下几个版本，可以再发消息时顺便传递参数:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;performSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;withObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但其实局限颇多。由于参数类型是&lt;code class=&quot;highlighter-rouge&quot;&gt;id&lt;/code&gt;，所以传入的参数必须是对象才行。此外，选择子最多只能接受两个参数，而在参数不止两个的情况下，则没有对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;方法能够执行此种选择子。只能打包更多参数进入集合中再传递。&lt;/p&gt;

&lt;p&gt;所以, 要避免使用&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;系列方法所提供的线程功能，因为这些功能都可以通过在大中枢派发机制中使用块来实现。延后执行可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_after&lt;/code&gt;来实现，在另一个线程上执行任务则可通过&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_sync&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async&lt;/code&gt;来实现。&lt;/p&gt;

&lt;h3 id=&quot;总结-5&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;系列方法在内存管理方面容易有疏失。它无法确定将要执行的选择子具体是什么，因而&lt;code class=&quot;highlighter-rouge&quot;&gt;ARC&lt;/code&gt;编译器也就无法插入适当的内存管理方法。&lt;/li&gt;
  &lt;li&gt;2.&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都受到限制。&lt;/li&gt;
  &lt;li&gt;3.如果想把任务放在另一个线程上执行，那么最好不要用&lt;code class=&quot;highlighter-rouge&quot;&gt;performSelector&lt;/code&gt;系列方法，而是应该把任务封装到块里，然后调用大中枢派发机制的相关方法来实现。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-掌握gcd及操作队列的使用时机&quot;&gt;㊸ 掌握GCD及操作队列的使用时机&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;是纯C的API，而&lt;code class=&quot;highlighter-rouge&quot;&gt;操作队列&lt;/code&gt;(NSOperationQueue)则是Objective-C的API, 而且操作队列在底层是用&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;来实现的。在&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;中，任务用块来表示，而块是个轻量级数据结构。与之相反，&lt;code class=&quot;highlighter-rouge&quot;&gt;操作&lt;/code&gt;(NSOperation)则是个更为重量级的Objective-C对象。&lt;/p&gt;

&lt;p&gt;在执行后台任务时，&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;并不一定是最佳方式, 操作队列有很多地方胜过派发队列。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;及&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;的好处如下：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;可以取消某个操作, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;没有取消操作。如果使用操作队列，那么想要取消操作是很容易的。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;可以指定优先级, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;只支持FIFO队列。操作的优先级表示此操作与队列中的其他操作之间的优先级关系。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;支持在操作之间设置依赖关系, 而&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;没有内建的依赖关系支持。一个操作可以依赖其他多个操作。开发者能够指定操作之间的依赖体系，使特定的操作必须在另外一个操作顺利执行完毕后方可执行。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;秉容&lt;code class=&quot;highlighter-rouge&quot;&gt;KVO&lt;/code&gt;)。&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;对象有很多属性都适合通过KVO来进行监测, 这意味着你可以观察任务的状态。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;可以自定义子类。除了系统内置的子类，还可以自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;的子类。这些类就是普通的 Objective-C对象, 能够存放任何信息, 还可以随意调用定义在类中的方法。这就比派发队列中那些简单的块要强大许多。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;那我们应该只用&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;而不用&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;吗? 答案是否定的。 因为&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;的执行速度比&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;慢。&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperation&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;并不相互排斥。你可以把复杂的任务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;去处理, 而把简单的任务交于&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;去处理, 能在两者之间的结合使用会使你的程序更高效, 更强大。&lt;/p&gt;

&lt;p&gt;iOS多线程还有NSThread, 它的缺点是需要手动管理所有的线程活动, 而且执行方法都是通过performSelector来完成的。 所以需要等到运行时才能确定, 且可能导致内存泄漏, 具体原因请看本文的第㊷条。但是有一点, &lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;不需要操心任务在哪条线程上处理, 因为系统会做出最优化线程选择。然而NSThread能准确的指定线程, 在某个线程上执行任务。&lt;/p&gt;

&lt;h3 id=&quot;总结-6&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.在解决多线程与任务管理问题时，派发队列并非唯一方案。&lt;/li&gt;
  &lt;li&gt;2.操作队列提供了一套高层的Objective-C API，能实现纯&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;所具备的绝大部分功能，而且还能完成一些更为复杂的操作，那些操作若改用&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;来实现，则需另外编写代码。&lt;/li&gt;
  &lt;li&gt;3.根据实际情况来选择多线方式, &lt;code class=&quot;highlighter-rouge&quot;&gt;NSThread&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;还是&lt;code class=&quot;highlighter-rouge&quot;&gt;NSOperationQueue&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-通过dispatch-group机制-根据系统资源状况来执行任务&quot;&gt;㊹ 通过Dispatch Group机制, 根据系统资源状况来执行任务&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch group&lt;/code&gt;(派发分组, 调度组)是&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;的一项特性，能够把任务分组。调用者可以等待这组任务执行完毕，也可以在提供回调函数之后继续往下执行，这组任务完成时，调用者会得到通知。&lt;/p&gt;

&lt;p&gt;它可以把一些任务归入一个组内来执行，并通过监听组内所有任务的总体完成情况来做下一步相应处理。一般通过&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_async&lt;/code&gt;把块内的任务添加进&lt;code class=&quot;highlighter-rouge&quot;&gt;group&lt;/code&gt;中, 也有手动方法&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_enter&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_leave&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;任务添加后, 有两个方法可以关联执行: &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_wait&lt;/code&gt;: 同步等待当前任务组执行完毕, 完毕后解除线程阻塞。当前任务组执行时间超出timeout时或者任务组完成时，该函数返回。可以传入的&lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt;参数设定等待时间, 表示阻塞多久。官方还提供&lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_TIME_NOW&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_TIME_FOREVER&lt;/code&gt;常数方便使用。 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_notify&lt;/code&gt;: 待任务组执行完毕时调用，不会阻塞当前线程。等待任务组执行完毕之后，块会在特定的线程上执行。&lt;/p&gt;

&lt;p&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;Dispatch Group&lt;/code&gt;机制, 我们也可以看出资源配置的问题。为了执行队列中的块，&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;会在适当的时机自动创建新线程或复用旧线程。如果使用并发队列，那么其中有可能会有多个线程，这也就意味着多个块可以并发执行。在并发队列中，执行任务所用的并发线程数量，取决于各种因素，而&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;主要是根据系统资源状况来判断这些因素的。由于&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;有并发队列机制，所以能够根据可用的系统资源状况来并发执行任务。&lt;/p&gt;

&lt;p&gt;一个关于循环的函数&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_apply&lt;/code&gt;: 此函数会将块反复执行一定的次数，每次传给块的参数值都会递增。&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_apply&lt;/code&gt;如果使用串行队列就类似我们平时缩写的&lt;code class=&quot;highlighter-rouge&quot;&gt;for循环&lt;/code&gt;, 所以意义不大。如果采用并发队列，那么系统就可以根据资源状况来并行执行这些块了&lt;/p&gt;

&lt;h3 id=&quot;总结-7&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.一系列任务可归入一个&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch group&lt;/code&gt;之中。开发者可以在这组任务执行完毕时获得通知。&lt;/li&gt;
  &lt;li&gt;2.通过&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch group&lt;/code&gt;，可以在并发式派发队列里同时执行多项任务。此时&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;会根据系统资源状况来调度这些并发执行的任务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-使用dispatch_once来执行只需执行一次的线程安全代码&quot;&gt;㊺ 使用dispatch_once来执行只需执行一次的线程安全代码&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_once&lt;/code&gt;可以简化代码并且彻底保证线程安全，开发者根本无须担心加锁或同步。所有问题都由&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;在底层处理。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_once&lt;/code&gt;更高效，它没有使用重量级的同步机制。此函数采用&lt;code class=&quot;highlighter-rouge&quot;&gt;原子访问&lt;/code&gt;(atomic access)来查询标记，以判断其所对应的代码原来是否已经执行过。所以使用它来替代同步锁的话, 速度可以提前一倍。&lt;/p&gt;

&lt;h3 id=&quot;总结-8&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.经常需要编写&lt;code class=&quot;highlighter-rouge&quot;&gt;只需执行一次的线程安全代码&lt;/code&gt;(thread-safe single-code execution)。通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;所提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_once&lt;/code&gt;函数，很容易就能实现此功能。&lt;/li&gt;
  &lt;li&gt;2.标记应该声明在&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt;作用域中，这样的话，在把只需执行一次的块传给&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_once&lt;/code&gt;函数时，传进去的标记也是相同的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;-不要使用dispatch_get_current_queue&quot;&gt;㊻ 不要使用dispatch_get_current_queue&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;时，经常需要判断当前代码正在哪个队列上执行，向多个队列派发任务时，更是如此。&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queue&lt;/code&gt;函数返回当前正在执行代码的队列，不过用的时候要小心。从iOS系统6.0版本起，已经将其废弃了。&lt;/p&gt;

&lt;p&gt;该函数有种典型的错误用法(antipattern，&lt;code class=&quot;highlighter-rouge&quot;&gt;反模式&lt;/code&gt;)，就是用它检测当前队列是不是某个特定的队列，试图以此来避免执行同步派发时可能遭遇的死锁问题。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dispatch_get_current_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queueA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Code1&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Code2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用队列时还要注意另外一个问题，而那个问题会在你意想不到的地方导致死锁。队列之间会形成一套层级体系，这意味着排在某条队列中的块，会在其上级队列(parent queue，也叫&lt;code class=&quot;highlighter-rouge&quot;&gt;父队列&lt;/code&gt;)里执行。层级里地位较高的那个队列总是&lt;code class=&quot;highlighter-rouge&quot;&gt;全局并发队列&lt;/code&gt;。由于队列间有层级关系，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;检查当前队列&lt;/code&gt;是否为执行同步派发所用的队列这种办法，并不总是奏效。&lt;/p&gt;

&lt;center&gt;
&lt;img src=&quot;https://raw.githubusercontent.com/wangyanchang21/wangyanchang21.github.io/master/resource/effectiveoc-6/20180521114854523.png&quot; width=&quot;50%&quot; img=&quot;&quot; /&gt;
&lt;/center&gt;

&lt;p&gt;使用这种API的开发者可能误以为：在回调块里调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queue&lt;/code&gt;所返回的&lt;code class=&quot;highlighter-rouge&quot;&gt;当前队列&lt;/code&gt;，总是其调用API时指定的那个。但实际上返回的却是API内部的那个同步队列。&lt;/p&gt;

&lt;p&gt;要解决这个问题，最好的办法就是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;GCD&lt;/code&gt;所提供的功能来设定&lt;code class=&quot;highlighter-rouge&quot;&gt;队列特有数据&lt;/code&gt;(queue-specific data)，此功能可以把任意数据以键值对的形式关联到队列里。最重要之处在于，假如根据指定的键获取不到关联数据，那么系统就会沿着层级体系向上查找，直至找到数据或到达根队列为止。&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kQueueSpecific&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queueSpecificValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CFSTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queueA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;dispatch_queue_set_specific&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queueA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kQueueSpecific&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queueSpecificValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_function_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CFRelease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;kt&quot;&gt;CFStringRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrievedValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	&lt;span class=&quot;nf&quot;&gt;dispatch_get_specific&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kQueueSpecific&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrievedValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Code1&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Code2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后要说明的是, 并不是说&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queue&lt;/code&gt;就完全没有可用之地。其官方文档中写道, 它建议使用于仅限于调试的环境下。在此情况下，可以放心使用这个已经废弃的方法，只是别把它编译到发行版的程序里就行。&lt;/p&gt;

&lt;h3 id=&quot;总结-9&quot;&gt;总结&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;1.&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queue&lt;/code&gt;函数的行为常常与开发者所预期的不同。此函数已经废弃，只应做调试之用。&lt;/li&gt;
  &lt;li&gt;2.由于派发队列是按层级来组织的，所以无法单用某个队列对象来描述&lt;code class=&quot;highlighter-rouge&quot;&gt;当前队列&lt;/code&gt;这一概念。&lt;/li&gt;
  &lt;li&gt;3.&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_get_current_queue&lt;/code&gt;函数用于解决由不可重入的代码所引发的死锁，然而能用此函数解决的问题，通常也能改用&lt;code class=&quot;highlighter-rouge&quot;&gt;队列特定数据&lt;/code&gt;来解决。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;相关资料&quot;&gt;相关资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://wangyanchang21.github.io/2017/Effective-OC%E4%B9%8B%E4%B8%80&quot;&gt;高效 OC开发之熟悉Objective-C&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2017/Effective-OC%E4%B9%8B%E4%BA%8C&quot;&gt;高效 OC开发之对象、消息、运行时&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2017/Effective-OC%E4%B9%8B%E4%B8%89&quot;&gt;高效 OC开发之接口与API设计&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E5%9B%9B&quot;&gt;高效 OC开发之协议与分类&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E4%BA%94&quot;&gt;高效 OC开发之内存管理&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E5%85%AD&quot;&gt;高效 OC开发之Block和GCD&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://wangyanchang21.github.io/2018/Effective-OC%E4%B9%8B%E4%B8%83&quot;&gt;高效 OC开发之系统框架&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;欢迎指正, &lt;a href=&quot;https://github.com/wangyanchang21&quot;&gt;wangyanchang21&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 21 May 2018 20:53:04 +0800</pubDate>
        <link>http://localhost:4000/2018/Effective-OC%E4%B9%8B%E5%85%AD/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/Effective-OC%E4%B9%8B%E5%85%AD/</guid>
        
        <category>iOS</category>
        
        <category>Effective OC</category>
        
        <category>多线程</category>
        
        
        <category>iOS</category>
        
        <category>Effective OC</category>
        
        <category>多线程</category>
        
      </item>
    
  </channel>
</rss>
